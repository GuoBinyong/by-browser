{"version":3,"sources":["webpack://by/webpack/bootstrap","webpack://by/./node_modules/com-tools/src/ByURL.js","webpack://by/./node_modules/com-tools/src/ByURLSearchParams.js","webpack://by/./node_modules/com-tools/src/index.js","webpack://by/./node_modules/es-expand/src/index.js","webpack://by/./src/index.ts","webpack://by/./node_modules/es-expand/src/Object.js","webpack://by/./node_modules/es-expand/src/Array.js","webpack://by/./node_modules/es-expand/src/JSON.js","webpack://by/./node_modules/es-expand/src/String.js","webpack://by/./node_modules/es-expand/src/Math.js","webpack://by/./node_modules/es-expand/src/Number.js","webpack://by/./node_modules/es-expand/src/Date.js","webpack://by/./node_modules/dom-expand/src/index.js","webpack://by/./node_modules/dom-expand/src/Element.js","webpack://by/./node_modules/dom-expand/src/EventTarget.js","webpack://by/./node_modules/dom-expand/src/FormData.js","webpack://by/./node_modules/dom-expand/src/Node.js","webpack://by/./node_modules/bom-expand/src/index.js","webpack://by/./node_modules/bom-expand/src/Storage.js","webpack://by/./node_modules/bro-tools/src/Location.js","webpack://by/./node_modules/bro-tools/src/URL.js","webpack://by/./node_modules/bro-tools/src/URLSearchParams.js","webpack://by/./node_modules/bro-tools/src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ByURL","initUrl","paramsPropParse","paramsPropStringify","url","origin","host","pathname","pathList","search","searchParams","hash","hashSearch","hashParams","hashUrlUtils","addSearchParams","addHashParams","this","util","deleUtils","deleUrlUtilsMap","forEach","deleKey","urlUtils","undefined","assign","_deleUrlUtilsFor","newValue","_urlUtils","_initUrl","parseUrl","stringifyUrl","protocol","hostname","port","absPath","params","_paramsPropJSONParse","JSON","correctParse","_paramsPropJSONStringify","stringify","urlStr","hostRegExp","href","trim","splitURLByQueryString","hostUrl","protoList","split","length","hostList","hostItem0","test","slice","hostRegRes","match","join","parseQueryString","replace","keys","reduce","total","hrefUrlUtils","mergedSearchParams","excludeParams","excludeKeys","filterProperty","includes","noKeys","addSearch","queryStringify","addHashSearch","preIndex","indexOf","anrIndex","urlQS","substring","JSONQueryStringify","obj","queryPrefix","parseJSONQueryString","queryString","parseJSONQueryStrObjProperty","queryObj","entries","kvList","decodeURIComponent","arguments","paramList","map","kvArr","index","array","keyStr","encodeURIComponent","kvStr","similarQueryStringify","separOpts","propSeparator","prop","kvSeparator","kv","parseSimilarQueryString","objectPropertyDescriptors","toJSONqueryStringify","defineProperties","stringPropertyDescriptors","urlJSONQueryObj","String","ByURLSearchParams","initSearch","paramsPropReplacer","callback","thisArg","apply","values","_initSearch","_params","isEqualOfJSON","value1","value2","multipleLoop","loopCall","complete","stepComplete","thisValue","Number","POSITIVE_INFINITY","step","delay","stepCount","stop","setStop","loop","needLoop","timeoutId","atuoSingleLoop","singleTotal","Math","min","setTimeout","stopInfo","clearTimeout","arrayPropertyDescriptors","loopOpt","safelyIterate","iterable","operation","arrayCopy","push","filter","currentValue","currentIndex","getTypeOf","inst","typeInfo","constructor","getTypeStringOf","typeStr","defineListenableProperty","options","ready","readyName","noEvent","event","eventName","newValueKey","oldValueKey","getDefault","priReadyName","priProp","configurable","_this","window","propValue","Promise","resolve","createControllablePromise","set","propGetter","propSetter","httpReady","oldValue","change","Event","dispatchEvent","defineListenableProperties","props","propsObj","Array","isArray","propName","propOpts","defineListenablePropertyGetter","asGetter","createUniqueIdentifier","Date","getTime","toString","random","executor","statusCompletesImmediately","executorIsvalid","oriFuns","clearAdditions","caPromise","reject","resolveFun","rejectFun","reason","propertyDescriptors","findKey","testFun","find","findProperty","entry","propInfo","isFlat","some","propType","getValuesOfKeys","currentKey","getVirtualValuesOfKeys","currValue","findValueOfKeys","findValue","valid","getValuesForKeyFormats","formats","keyStrList","getAllStrForFormats","getVirtualValuesForKeyFormats","findValueForKeyFormats","isSubsetOf","universalObj","equalTest","a","b","every","entrie","depthLoopOwnProperty","depth","all","initDepth","keyList","getOwnPropertyNames","depthLoopPropertyWithPrototype","preValue","entr","assignKeys","target","sources","keysSourceList","source","newSource","aKey","aValue","assignExcludeKeys","allKeys","getComplementOn","assignIncludeAndExcludeKeys","getIncludeAndExclude","ownProps","resArray","fromEntries","defineProxyProperty","proxy","setDefault","descriptor","defineProxyProperties","isDepthEqual","nullNotEqualUndefined","is","aType","bType","aClassName","bClassName","isArr","leading","bValue","aEntrs","bEntrs","aEntr","getNoRepeats","currentItem","arr","getNoRepeatsUseRepeatTest","isRepeated","findIndex","findItem","safelyOperateIndexs","indexList","itemList","safelyOperateItems","itemListCopy","item","safelyFilter","move","fromIndex","toIndex","moveEleArr","splice","moveTo","fromIndexs","moveItems","deleteIndexs","moveItemsTo","items","indexArr","deleteItems","moveToUseTest","needMoveTest","deleteUseTest","insertItem","deleItems","insertItemList","reduceRight","deleItemList","unshift","delete","start","end","indexs","currentArray","needDeleteTest","filterIndexs","filterTest","lastItem","isContains","thisItem","getIntersection","thisEle","arrEle","isIntersect","universalArr","arrItem","include","exclude","valids","reverseIndexForIndex","queuePush","queuePop","pop","queueUnshift","len","queueShift","shift","intersectionOf","arrays","sort","arr1","arr2","leastArr","isArrayLike","isInteger","extendJSON","extended","safelyParse","text","reviver","parseInfo","parsed","result","parse","e","depthStringify","replacer","space","newTarget","depthParse","isJSONString","isJSON","oriJSON","globalThis","_JSON","noChars","capFirstLetter","p1","p2","toUpperCase","toSeparatorLineFormat","separator","caseType","lowerCase","targetStr","offset","oriStr","matchStr","toLowerCase","errorSeparatorRex","RegExp","toCamelFormat","separatorRex","format","isURL","distanceSort","nums","numList","firstNum","disSort","abs","nearest","farthest","lastIndex","isFinite","floor","getDayNumberOfMonth","year","month","date","initValue","setMonthOffset","setDate","dayNum","getDate","getDayNumber","setYearOffset","num","getFullYear","setFullYear","getMonth","setMonth","setDateOffset","setHourOffset","getHours","setHours","setMinuteOffset","getMinutes","setMinutes","setSecondOffset","getSeconds","setMillisecondOffset","getMilliseconds","setMilliseconds","Element","scrollDistanceFromParent","parentNode","top","scrollTop","left","scrollLeft","nextNode","isSameNode","x","y","offsetFromDocument","offsetTop","offsetLeft","offsetParent","distanceToDom","toDom","fromRect","getBoundingClientRect","toRect","isVertical","isVer","getComputedStyle","writingMode","computedLineHeight","compStyle","lineHeight","parseFloat","isNaN","fontSize","contentHeight","clientHeight","paddingTop","paddingBottom","contentWidth","clientWidth","paddingLeft","paddingRight","scrollContentHeight","scrollHeight","scrollContentWidth","scrollWidth","numberOfLinesOnClient","numberOfCharsPerLineOnClient","numberOfCharsOnClient","round","numberOfLinesOnScroll","numberOfCharsPerLineOnScroll","numberOfCharsOnScroll","calcClientLengthOfLines","lineNumber","isVisible","visible","boxSizing","setNumberOfLines","lengthInfo","lineLength","lengthStyle","style","width","height","setNumberOfChars","charNumber","charLength","isBorderBox","setNumberOfLinesAndChars","EventTarget","byAddEventListener","handler","useCapture","addEventListener","attachEvent","byRemoveEventListener","removeEventListener","detachEvent","byAddListenerForMultipleEvent","eventList","byRemoveListenerForMultipleEvent","byAddMultipleListenerForEvent","handlerList","byRemoveMultipleListenerForEvent","fdPrototype","FormData","append","Node","isChildNodeOf","node","parent","isChildElementOf","element","parentElement","contains","otherNode","Storage","setAnyItem","keyName","anyItem","jsonStr","setItem","getParsedItem","getItem","URLSearchParams","Location","URL","webkitURL","toParams","resetParams","stringifyUrlByURLClass","urlObj","urlInst","pathURLInst","oriSearch","separ","setParams","parseUrlByURLClass","username","password","_URLsearchParamsInst_","_URLSearchParamsConstructor_","clear","appendParams","paramsSP","elementIsMatchSelector","selector","document","elemList","querySelectorAll","from","qsElem","elementIsMatchOption","option","keyMatch","localName","tagName","id","classList","className","isMatchSelector","elementIsMatchSomeOptions","optionArr","createManyTimesEventListener","times","timeout","eventMap","eventType","type","sameEvent","eventItem","listenTarget","currentTarget","currentTimes","currentEvent","handlerParamListh","concat","myEventTypeList","currentEventIndex","focusInputOnTargetOfEvent","targetTests","excludeInput","testArr","isMatchOption","testTarget","focus","inputDom","getElementsByTagName","loadScript","scriptProps","src","otherPross","scriptEle","createElement","body","appendChild","prohibitWindowHeightChangeWhenInput","cancel","focusinHandler","__prohibitWindowHeightChangeWhenInput_Focusin_Handler__","focusoutHandler","__prohibitWindowHeightChangeWhenInput_Focusout_Handler__","htmlDom","documentElement","htmlStyle","bodyDom","bodyStyle","__originalHeightStyle__","html","compStyleOfHtml","compStyleOfBody","oriHeightStyle","isMatchSomeOptions"],"mappings":"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","file":"by-browser.script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","//ByURL：开始\n\n/**\n * 该类是用于在不支持 URL 类型的环境下替代 URL 的；但该类的提供的功能和接口远丰富于 URL ，但并不完全包含于 URL ，所以，完全替换 URL\n */\nexport class ByURL {\n\n  deleUrlUtilsMap = {\n    url:[\"origin\",\"protocol\",\"host\",\"hostname\",\"port\",\"pathname\",\"pathList\",\"absPath\"],\n    origin:[\"protocol\",\"host\",\"hostname\",\"port\"],\n    host:[\"hostname\",\"port\"],\n    pathname:[\"pathList\",\"absPath\"],\n    pathList:[\"pathname\",\"absPath\"],\n    search:[\"searchParams\",\"params\"],\n    searchParams:[\"search\",\"params\"],\n    hash:[\"hashSearch\",\"hashParams\",\"hashUrlUtils\",\"params\"],\n    hashSearch:[\"hashParams\",\"params\"],\n    hashParams:[\"hashSearch\",\"params\"],\n    hashUrlUtils:[\"hash\",\"hashSearch\",\"hashParams\",\"params\"],\n    addSearchParams:[\"addSearch\"],\n    addHashParams:[\"addHashSearch\"]\n  };\n\n  /**\n   * paramsPropParse  : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，否则，原样输出；\n   */\n  paramsPropParse;\n\n  /**\n   * paramsPropStringify : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n   */\n  paramsPropStringify;\n\n  /**\n   *\n   * @param initUrl : UrlUtils | string    必选；\n   * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n   * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n   */\n  constructor(initUrl,paramsPropParse,paramsPropStringify){\n    this.paramsPropParse = paramsPropParse;\n    this.paramsPropStringify = paramsPropStringify;\n    this.initUrl = initUrl;\n  }\n\n  /**\n   * urlUtils 包含解析后的所有url组件的对象\n   */\n  set urlUtils(newValue){\n      this._urlUtils = newValue;\n  }\n\n  get urlUtils(){\n    if (!this._urlUtils) {\n      this._urlUtils = {};\n    }\n    return this._urlUtils;\n  }\n\n\n  /**\n   * 原始输入的 url\n   * @param newValue\n   */\n  set initUrl(newValue){\n    this._initUrl = newValue;\n    if (newValue){\n      var urlUtils = newValue;\n      if (typeof newValue != \"object\"){\n        urlUtils = parseUrl(newValue,this.paramsPropParse,this.paramsPropStringify);\n      }\n      this.urlUtils = urlUtils;\n    }\n  }\n\n  get initUrl(){\n    return this._initUrl;\n  }\n\n\n\n  get href(){\n    return stringifyUrl(this.urlUtils,this.paramsPropStringify,this.paramsPropParse);\n  }\n  set href(newValue){\n    this.initUrl = newValue;\n  }\n\n\n  get url(){\n    return this.urlUtils.url;\n  }\n  set url(newValue){\n    this._deleUrlUtilsFor(\"url\");\n    this.urlUtils.url = newValue;\n  }\n\n\n\n  get origin(){\n    return this.urlUtils.origin;\n  }\n  set origin(newValue){\n    this._deleUrlUtilsFor(\"origin\");\n    this.urlUtils.origin = origin;\n  }\n\n\n  get protocol(){\n    return this.urlUtils.protocol;\n  }\n  set protocol(newValue){\n    this._deleUrlUtilsFor(\"protocol\");\n    this.urlUtils.protocol = newValue;\n  }\n\n\n\n  get host(){\n    return this.urlUtils.host;\n  }\n  set host(newValue){\n    this._deleUrlUtilsFor(\"host\");\n    this.urlUtils.host = newValue;\n  }\n\n\n\n  get hostname(){\n    return this.urlUtils.hostname;\n  }\n  set hostname(newValue){\n    this._deleUrlUtilsFor(\"hostname\");\n    this.urlUtils.hostname = newValue;\n  }\n\n\n\n  get port(){\n    return this.urlUtils.port;\n  }\n  set port(newValue){\n    this._deleUrlUtilsFor(\"port\");\n    this.urlUtils.port = newValue;\n  }\n\n\n  get pathname(){\n    return this.urlUtils.pathname;\n  }\n  set pathname(newValue){\n    this._deleUrlUtilsFor(\"pathname\");\n    this.urlUtils.pathname = newValue;\n  }\n\n\n\n  get pathList(){\n    return this.urlUtils.pathList;\n  }\n  set pathList(newValue){\n    this._deleUrlUtilsFor(\"pathList\");\n    this.urlUtils.pathList = newValue;\n  }\n\n\n  get absPath(){\n    return this.urlUtils.absPath;\n  }\n\n\n\n  get search(){\n    return this.urlUtils.search;\n  }\n  set search(newValue){\n    this._deleUrlUtilsFor(\"search\");\n    this.urlUtils.search = newValue;\n  }\n\n\n\n  get searchParams(){\n    return this.urlUtils.search;\n  }\n  set searchParams(newValue){\n    this._deleUrlUtilsFor(\"searchParams\");\n    this.urlUtils.searchParams = newValue;\n  }\n\n\n\n  get hash(){\n    return this.urlUtils.hash;\n  }\n  set hash(newValue){\n    this._deleUrlUtilsFor(\"hash\");\n    this.urlUtils.hash = newValue;\n  }\n\n\n\n  get hashSearch(){\n    return this.urlUtils.hashSearch;\n  }\n  set hashSearch(newValue){\n    this._deleUrlUtilsFor(\"hashSearch\");\n    this.urlUtils.hashSearch = newValue;\n  }\n\n\n\n  get hashParams(){\n    return this.urlUtils.hashParams;\n  }\n  set hashParams(newValue){\n    this._deleUrlUtilsFor(\"hashParams\");\n    this.urlUtils.hashParams = newValue;\n  }\n\n\n  get hashUrlUtils(){\n    return this.urlUtils.hashUrlUtils;\n  }\n  set hashUrlUtils(newValue){\n    this._deleUrlUtilsFor(\"hashUrlUtils\");\n    this.urlUtils.hashUrlUtils = newValue;\n  }\n\n\n  get params(){\n    return this.urlUtils.params;\n  }\n\n\n  /**\n   * 清除与 util 相关的子 util\n   * @param util : string\n   */\n  _deleUrlUtilsFor(util){\n    let deleUtils = this.deleUrlUtilsMap[util];\n    if (deleUtils){\n      deleUtils.forEach((deleKey)=>{\n        this.urlUtils[deleKey] = undefined;\n      });\n    }\n  }\n\n\n  /**\n   * 接口1:\n   * addSearchParams(key,value)\n   * 给查询参数添加新的成员，并返回添加后的查询参数对象\n   * @param key : string   添加的key\n   * @param value : any    添加的值\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口2:\n   * 追加查询参数params，并返回追加后的查询参数对象\n   * addSearchParams(params)\n   * @param params : Object   添加的params对象\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口3:\n   * addSearchParams()\n   * 获取添加的查询参数\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   */\n  addSearchParams(key,value){\n\n    if (key){\n\n      let addSearchParams = this.urlUtils.addSearchParams || {};\n      if (typeof key == \"object\"){\n        Object.assign(addSearchParams,key);\n      } else {\n        addSearchParams[key] = value;\n      }\n      this._deleUrlUtilsFor(\"addSearchParams\");\n      this.urlUtils.addSearchParams = addSearchParams;\n\n    }\n\n    return this.urlUtils.addSearchParams;\n  }\n\n\n\n\n\n\n\n  /**\n   * 接口1:\n   * addHashParams(key,value)\n   * 给hash查询参数添加新的成员，并返回添加后的hash查询参数对象\n   * @param key : string   添加的key\n   * @param value : any    添加的值\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口2:\n   * addHashParams(params)\n   * 追加查询参数params，并返回追加后的查询参数对象\n   * @param params : Object   添加的params对象\n   * @returns addSearchParams : Object    返回添加后的查询参数对象\n   *\n   *\n   * 接口3:\n   * addHashParams()\n   * 获取添加的hash查询参数\n   * @returns addSearchParams : Object    返回添加后的hash查询参数对象\n   */\n  addHashParams(key,value){\n\n    if  (key){\n\n      let addHashParams = this.urlUtils.addHashParams || {};\n      if (typeof key == \"object\"){\n        Object.assign(addHashParams,key);\n      } else {\n        addHashParams[key] = value;\n      }\n      this._deleUrlUtilsFor(\"addHashParams\");\n      this.urlUtils.addHashParams = addHashParams;\n    }\n\n    return this.urlUtils.addHashParams;\n\n  }\n\n\n\n\n\n}\n\n\n\n//ByURL：结束\n\n\n\n\n\n\n\n\n\n// 普通解析与字符串化：开始\n\n\n//不依赖 URL 和 URLSearchParams 的解析：开始\n\n\n/**\n *默认的 paramsPropParse ; 用JSON解析参数的属性\n */\nfunction _paramsPropJSONParse(value) {\n  return JSON.correctParse(value);\n}\n\n\n\n/**\n *默认的 paramsPropStringify ；用JSON序列化参数的属性\n */\nfunction _paramsPropJSONStringify(value,key,params) {\n    if (typeof value == \"object\"){\n      value = JSON.stringify(value);\n    }\n    return value;\n}\n\n\n\n\n/**\n * 把url字符串解析成 UrlUtils 对象； UrlUtils 对象是包含所有 url 组件的对象；\n * 注意：\n * - 本方法中没有依赖 URL 类型进行解析，使用是纯粹的字符中解析，所以可以在不支持 URL 类型的环境下使用，比如：小程序；\n * - 当 searchParams 和 hashParams 中的的属性值是 JSON 字符串时，会自动转对象\n *\n * @param urlStr : string   必选；url字符串，可以是无效的或者不完整的url字符串\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n * @returns urlUtils : UrlUtils\n *\n 返回的对象 UrlUtils 对象包含以下属性\n href:string,    //包含完整 URL 的 DOMString。\n url:string,   //不包含search和hase 的url\n origin:string,  //返回一个包含协议名、域名和端口号的 DOMString。\n protocol:string,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n host:string,  //包含 URL 域名，':'，和端口号的 DOMString。\n hostname:string,  //包含 URL 域名的 DOMString。\n port:string,    //包含 URL 端口号的 DOMString。\n pathname:string,  //URL 的路径的字符串。\n pathList:Array,  //url的路径名列表\n absPath:boolean, //pathname 是否是经对路径\n search:string,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。\n searchParams:Object,  //查询参数search的对象形式\n hash:string, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。\n hashSearch:string, // 哈唏hash中的查询字符串\n hashParams:Object,   //哈唏hash中的参数\n hashUrlUtils:UrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils\n params:Object,    //url中所有的参数，包括 searchParams 和 hashParams\n *\n */\nexport function parseUrl(urlStr,paramsPropParse,paramsPropStringify){\n  var protocolRegExp;\n  protocolRegExp = /^\\w+(?=:\\/\\/)/;\n  var hostRegExp = /([^./:\\s]+(?:\\.[^./:\\s]+)+)(?::(\\d+))?|([^./:\\s]+)(?::(\\d+))/;\n\n  if (!paramsPropParse){\n    paramsPropParse = _paramsPropJSONParse;\n  }\n\n\n  if (!paramsPropStringify){\n    paramsPropStringify = _paramsPropJSONStringify;\n  }\n\n  var href = urlStr.trim();\n  var {url,search,hash} = splitURLByQueryString(href);\n\n\n  //解析协间 protocol\n  if (url){\n    var hostUrl = url;\n    var protoList = url.split(\"://\");\n    if (protoList.length > 1){\n      var protocol = protoList[0];\n      hostUrl = protoList[1];\n    }\n  }\n\n\n\n\n\n  //解析域名和路径 host hostname port pathname  pathList absPath\n  if (hostUrl){\n    var hostList = hostUrl.split(\"/\");\n\n    if (hostList.length > 1){\n\n      var hostItem0 = hostList[0];\n\n      if (/^\\.+$/.test(hostItem0)){ //以 .开关：相对路径\n        var pathname = hostUrl;\n        var pathList = hostList.slice(1);\n        var absPath = false;     //绝对路径的标识设置为假\n      }else if (hostItem0) {\n        var hostRegRes = hostItem0.match(hostRegExp);\n        if (hostRegRes){  //判断通过/分隔后的第一个元素是否符合 host 的格式\n          var host = hostRegRes[0];\n          var hostname = hostRegRes[1] || hostRegRes[3];\n          var port = hostRegRes[2] || hostRegRes[4];\n          pathList = hostList.slice(1);\n          pathname = \"/\" + pathList.join(\"/\");\n          absPath = true;\n        }else {\n          absPath = false;\n          pathList = hostList;\n          pathname = hostUrl;\n        }\n\n      }else { //如果通过/分隔后的第一个元素为空字符串，则说明 hostUrl 是个绝对路径\n        pathList =  hostList.slice(1);\n        pathname = hostUrl;\n        absPath = true;\n      }\n\n\n\n    }else { //如果 hostUrl 中不包含 / ，则说明 hostUrl 是单个域名\n      hostRegRes = hostUrl.match(hostRegExp);\n      if (hostRegRes) {\n        host = hostUrl;\n        hostname = hostRegRes[1];\n        port = hostRegRes[2];\n        absPath = true;\n      }else {\n        pathname = hostUrl;\n        pathList = hostList;\n        absPath = false;\n      }\n\n    }\n\n  }\n\n\n\n\n  //构造 origin\n  if (host) {\n    if (protocol){\n      var origin = protocol + \"://\" + host;\n    } else {\n      origin = host\n    }\n\n  }\n\n\n\n  //解析查询字符串 search  params\n  if (search) {\n    var searchParams = parseQueryString(search,paramsPropParse);\n  }\n\n  //解析哈唏 hash hashParams\n  if (hash){\n    var hashParamStr = hash.replace(/^#+/,\"\");\n    var hashUrlUtils = parseUrl(hashParamStr,paramsPropParse,paramsPropStringify);\n    var hashSearch = hashUrlUtils.search;\n    var hashParams = hashUrlUtils.params;\n  }\n\n\n  //构造 params 对象\n  if  (searchParams || hashParams){\n    var params = {};\n    if (searchParams){\n      Object.assign(params,searchParams);\n    }\n\n    if (hashParams){\n      Object.assign(params,hashParams);\n    }\n  }\n\n\n\n\n  //构造 UrlUtils\n  var urlUtils = {\n    href:href,    //包含完整 URL 的 DOMString。\n    url:url,   //不包含search和hase 的url\n    origin:origin,  //返回一个包含协议名、域名和端口号的 DOMString。\n    protocol:protocol,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n    host:host,  //包含 URL 域名，':'，和端口号的 DOMString。\n    hostname:hostname,  //包含 URL 域名的 DOMString。\n    port:port,    //包含 URL 端口号的 DOMString。\n    pathname:pathname,  //URL 的路径的字符串。\n    pathList:pathList,  //url的路径名列表\n    absPath:absPath, //pathname 是否是经对路径\n    search:search,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。\n    searchParams:searchParams,  //查询参数search的对象形式\n    hash:hash, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。\n    hashSearch:hashSearch, // 哈唏hash中的查询字符串\n    hashParams:hashParams,   //哈唏hash中的参数\n    hashUrlUtils:hashUrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils\n    params:params,    //url中所有的参数，包括 searchParams 和 hashParams\n  };\n\n\n  //精简 UrlUtils 对象，只保留有属性值的属性；\n  var simpUrlUtils = Object.keys(urlUtils).reduce(function (total, key) {\n    var value = urlUtils[key];\n    if (value != null){\n      total[key] = value;\n    }\n    return total;\n  },{});\n\n\n  return simpUrlUtils;\n}\n\n\n\n\n\n\n/**\n * 把  UrlUtils 对象序列化成 url 字符串； UrlUtils 对象是包含所有 url 组件的对象；\n *\n * @param urlUtils : UrlUtils   必选；url字符串，可以是无效的或者不完整的url字符串\n * @param paramsPropStringify ? : (value,key,params)=> string    可选；用于在序列化的对象参数时对参数的属性值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 对象类型，则将其转为JSON字符串，否则，正常序列化；\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；用于在解析 URL 时 url 的参数的值 进行转换；未指定该参数时,默认的逻辑是：如果属性值是 JSON 字符中串，则将其转为对象，不则，原样输出；\n * @returns urlStr : string\n *\n *\n * 注意：\n * - 本方法中没有依赖 URL 类型进行解析，使用是纯粹的字符中解析，所以可以在不支持 URL 类型的环境下使用，比如：小程序；\n * - 当 searchParams 和 hashParams 中的的属性值是 JSON 字符串时，会自动转对象\n * - 对于 urlUtils 中 顶层与 hash 相关的属性 比 urlUtils 属性 hashUrlUtils 中相应的属性优先级更高；\n * - 对于 urlUtils 中有冲突的url组件属性，则以组件粒度较细者优先；如：如果 urlUtils 中同时设置了 href 和 host 属性，则 host 属性值会取代 href 属性中的 host 部分；\n *\n *\n *\n *\n * urlUtils 对象可配置的属性包括 parseUrl 方法能解析出的所有属性，此还，还包括侯个新的属性：addSearch、addSearchParams、addHashSearch、addHashParams ；\n * urlUtils 中可配置的属性如下：\n addSearch: string   //另外追加的 search 字符串，该属性优先级低于addSearchParams\n addSearchParams: Object  // 另外追加的 search 对象，该属性优先级高于 addSearch\n addHashSearch: string   //另外追加的 hashSearch 字符串，该属性优先级低于 addHashParams\n addHashParams: Object  // 另外追加的 hashSearch 对象，该属性优先级高于 addHashSearch\n\n href:string,    //包含完整 URL 的 DOMString。\n url:string,   //不包含search和hase 的url\n origin:string,  //返回一个包含协议名、域名和端口号的 DOMString。\n protocol:string,  //包含 URL 协议名的 DOMString，末尾不带 ':'。\n host:string,  //包含 URL 域名，':'，和端口号的 DOMString。\n hostname:string,  //包含 URL 域名的 DOMString。\n port:string,    //包含 URL 端口号的 DOMString。\n pathname:string,  //URL 的路径的字符串。\n pathList:Array,  //url的路径名列表\n absPath:boolean, //pathname 是否是经对路径\n search:string,    //以 '?' 起头紧跟着 URL 请求参数的 DOMString。该属性的优先级低于 searchParams\n searchParams:Object,  //查询参数search的对象形式；如果没有设置该属性，则默认取 在 params 中 但不在 hashParams 中的所有属性组成的对象来代替； 该属性的优先级高于 search\n hash:string, //以 '#' 起头紧跟着 URL 锚点标记的 DOMString。该属性会 覆盖 hashUrlUtils.href 属性；\n hashSearch:string, // 哈唏hash中的查询字符串； 该属性的优先级低于 hashParams\n hashParams:Object,   //哈唏hash中的参数；如果没有设置该属性 且 设置了 searchParams，则默认取 在 params 中 但不在 searchParams 中的所有属性组成的对象来代替； 该属性的优先级高于 hashSearch； hashSearch 和 hashParams 之合 会 覆盖 hashUrlUtils.searchParams 属性；\n hashUrlUtils:UrlUtils,  //把哈唏字符串 hash 作为 url 解析成的 urlUtils； 顶层中的 hashSearch 和 hashParams 之合 会 覆盖 hashUrlUtils.searchParams 属性；\n params:Object,    //url的参数；\n *\n *\n */\nexport function stringifyUrl(urlUtils,paramsPropStringify,paramsPropParse){\n  var urlStr = \"\";\n\n  if (!paramsPropStringify){\n    paramsPropStringify = _paramsPropJSONStringify;\n  }\n\n\n\n  if (!paramsPropParse){\n    paramsPropParse = _paramsPropJSONParse;\n  }\n\n\n  var href = urlUtils.href || urlUtils.url || urlUtils.origin;\n  if (href){\n    var hrefUrlUtils = parseUrl(href,paramsPropParse,paramsPropStringify);\n    urlUtils = Object.assign(hrefUrlUtils,urlUtils)\n  }\n\n\n  //拼接协意 protocol\n  var protocol = urlUtils.protocol;\n  if (protocol){\n    urlStr = protocol + \"://\";\n  }\n\n  //拼接域名 host\n  var host = urlUtils.host;\n  var hostname = urlUtils.hostname;\n  if  (hostname){\n    host = hostname;\n    var port = urlUtils.port;\n    if (port){\n      host += \":\" + port;\n    }\n  }\n\n\n  if (host){\n    urlStr += host ;\n  }\n\n\n\n  //拼接路径 pathname\n  var pathname = urlUtils.pathname;\n  var pathList = urlUtils.pathList;\n  var absPath = urlUtils.absPath;\n  if (!pathname && pathList) {\n    pathname = \"/\" + pathList.join(\"/\");\n  }\n  if (pathname){\n    pathname = pathname.trim();\n    if (urlStr || absPath === true) {\n      pathname = pathname.replace(/^[./]*/,\"/\");\n    }\n    urlStr += pathname;\n  }\n\n\n\n\n\n\n\n\n  //追加查询参数 addSearch 或 addSearchParams\n  var search = urlUtils.search;\n  var searchParams = urlUtils.searchParams;\n\n  if (!searchParams && search){\n    searchParams = parseQueryString(search,paramsPropParse);\n  }\n\n  if (searchParams){\n    var mergedSearchParams = Object.assign({},searchParams);\n  }\n\n  var params = urlUtils.params;\n  if(!searchParams && params){\n    var excludeParams = urlUtils.hashParams || {};\n    var excludeKeys = Object.keys(excludeParams)\n    searchParams = params.filterProperty(function (key) {\n      return !excludeKeys.includes(key);\n    });\n\n    if (searchParams.noKeys){\n      searchParams = null;\n    }\n  }\n\n  var addSearchParams = urlUtils.addSearchParams;\n  var addSearch = urlUtils.addSearch;\n  if (!addSearchParams && addSearch){\n    addSearchParams = parseQueryString(addSearch,paramsPropParse);\n  }\n\n  if (searchParams && addSearchParams){\n    searchParams = Object.assign({},searchParams,addSearchParams);\n  }else if (addSearchParams){\n    searchParams = addSearchParams;\n  }\n\n\n\n\n  //拼接路径 search\n  if (searchParams && !searchParams.noKeys){\n    search = queryStringify(searchParams,true,paramsPropStringify);\n  }else {\n    search = null;\n  }\n\n  if (search){\n    urlStr += search;\n  }\n\n\n\n  //追加哈唏参数 addHashSearch 或 addHashParams\n  var hashSearch = urlUtils.hashSearch;\n  var hashParams = urlUtils.hashParams;\n\n  if (!hashParams && hashSearch){\n    hashParams = parseQueryString(hashSearch,paramsPropParse);\n  }\n\n  if(!hashParams && mergedSearchParams && params){\n    excludeKeys = Object.keys(mergedSearchParams)\n    hashParams = params.filterProperty(function (key) {\n      return !excludeKeys.includes(key);\n    });\n\n    if (hashParams.noKeys){\n      hashParams = null;\n    }\n  }\n\n\n\n  var addHashParams = urlUtils.addHashParams;\n  var addHashSearch = urlUtils.addHashSearch;\n  if (!addHashParams && addHashSearch){\n    addHashParams = parseQueryString(addHashSearch,paramsPropParse);\n  }\n\n  if (hashParams && addHashParams){\n    hashParams = Object.assign({},hashParams,addHashParams);\n  }else if (addHashParams){\n    hashParams = addHashParams;\n  }\n\n\n\n\n  //拼接哈唏 hash\n  var hash = urlUtils.hash;\n  var hashUrlUtils = urlUtils.hashUrlUtils;\n\n\n  if (hashUrlUtils || hashParams) {\n\n    if (hashUrlUtils){\n      hashUrlUtils = Object.assign({},hashUrlUtils)\n    }else {\n      hashUrlUtils = {};\n    }\n\n    if (hash){\n      hash = hash.replace(/^#+/,\"\");\n      hashUrlUtils.href = hash;\n    }\n\n    if (hashParams) {\n      hashUrlUtils.searchParams = hashParams;\n    }\n\n    if (!hashUrlUtils.noKeys){\n      hash = stringifyUrl(hashUrlUtils,paramsPropStringify,paramsPropParse);\n    }\n\n  }\n\n\n  if (hash) {\n    hash = hash.replace(/^#*/,\"#\");\n    urlStr += hash;\n  }\n\n\n  return urlStr;\n}\n\n\n\n\n\n\n\n\n/**\n * 把url字符串分隔成 url、查询字符串search 和 哈唏hash 三段字符串；\n * @param urlStr\n * @returns {url: string, search: string, hash: string}   其中，url字符串不包括 search 和 hash ；并且 search 开头有 \"?\", hash 开头有 \"#\"\n *\n * 本方法法之所以没用正则 和 URL 等，目的是为了防止 urlStr 中 有 多个 ## 等不规范情况 和 让该方法具有通用性\n */\nexport function splitURLByQueryString(urlStr) {\n\n  var preIndex = urlStr.indexOf(\"?\");\n  var anrIndex = urlStr.indexOf(\"#\");\n\n  var urlQS = urlStr;\n  var hash = undefined;\n  if (anrIndex >= 0){\n    urlQS = urlStr.substring(0,anrIndex);\n    hash = urlStr.substring(anrIndex);\n  }\n\n  var search = undefined;\n  var url = urlQS;\n  if (preIndex >= 0) {\n    search = urlQS.substring(preIndex);\n    url = urlQS.substring(0,preIndex);\n  }\n\n  return {url,search,hash};\n}\n\n\n\n\n\n\n\n\n\n\n\n// JSON解析与字符串化：开始\n\n\n\n/**\n * 把对象 obj 用JSON的方式格式化成 URL 的参数格式；\n * @param obj : Object   必选；被格式化的对象\n * @param queryPrefix ? : boolean    可选；默认值：false; 是否带URL的查询字符串前缀 ?\n * @returns 格式化后的 URL 的参数格式\n *\n *\n * 说明\n * 当URL参数对象 obj 不只有一层属性（如果obj的属性也是对象）时，URL的查询字符串就很很表示了；本方法就是用来解决这个问题；\n * 被本方法格式化的URL查询字符串，需要用 JSON 的 parseQueryString 方法来解析成对象；\n *\n */\nexport function JSONQueryStringify(obj,queryPrefix) {\n  return queryStringify(obj,queryPrefix,_paramsPropJSONStringify);\n}\n\n\n\n/**\n * 把 通过 JSONQueryStringify 格式化后的查询字符串 queryString 解析成 对象；\n * @param queryString : string   必选；被格式化的对象\n * @returns 解析后的对象\n *\n */\nexport function parseJSONQueryString(queryString) {\n  return parseQueryString(queryString,_paramsPropJSONParse);\n}\n\n\n\n\n\n\n/**\n * parseJSONQueryStrObjProperty(queryObj)\n * 把 通过 JSONQueryStringify 格式化后的查询字符串的对象的属性 解析成 真实的值；\n * @param queryObj : Object   必选；查询字符串对象; 一般是经过初次查询字符串的解析(比如：parseQueryString)成的对象；\n * @returns 解析后的对象\n *\n */\nexport function parseJSONQueryStrObjProperty(queryObj) {\n  return Object.entries(queryObj).reduce(function (total, kvList) {\n    let key = kvList[0];\n    let jsonStr = decodeURIComponent(kvList[1]);\n    total[key] = JSON.correctParse(kvList[1]);\n\n    return total;\n  }, {});\n\n}\n\n\n\n// JSON解析与字符串化：结束\n\n\n\n\n//查询字符串：开始\n\n\n/**\n * 接口1\n * queryStringify(params,queryPrefix,paramsPropStringify)\n * @param params : Object    被序列化的参数对象\n * @param queryPrefix ? : boolean   可选；默认值：false ; 是否带有 ？ 前缀\n * @param paramsPropStringify ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n * @returns string   序列化后的url查询字符串\n *\n *\n *\n *\n * 接口2:\n * queryStringify(params,paramsPropStringify)\n * @param params : Object    被序列化的参数对象\n * @param paramsPropStringify ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n * @returns string   序列化后的url查询字符串\n */\nexport function queryStringify(params,queryPrefix,paramsPropStringify) {\n  if (arguments.length == 2 && typeof queryPrefix == \"function\"){\n    paramsPropStringify = queryPrefix;\n    queryPrefix = undefined;\n  }\n\n\n  if (!paramsPropStringify){\n    paramsPropStringify = function (value) {\n      return value;\n    };\n  }\n\n\n  var paramList = Object.entries(params).map(function (kvArr, index, array) {\n    var key = kvArr[0];\n    var keyStr = encodeURIComponent(key);\n\n    var value = kvArr[1];\n    value = paramsPropStringify.call(params,value,key,params);\n    var valueStr = encodeURIComponent(value);\n\n    return keyStr + \"=\" + valueStr;\n  });\n\n  var queryString = paramList.join(\"&\");\n\n  if (queryPrefix){\n    queryString = \"?\" + queryString;\n  }\n\n  return queryString;\n\n}\n\n\n/**\n * parseQueryString(queryString,paramsPropParse)\n * @param queryString : string    被解析的查询字符串；\n * @param paramsPropParse ? : (value,key,queryString)=> value    可选；对 value 进行转换\n * @returns Object   解析后的对象\n */\nexport  function parseQueryString(queryString,paramsPropParse) {\n  if (!paramsPropParse){\n    paramsPropParse = function (value) {\n      return value;\n    };\n  }\n\n\n  var preIndex = queryString.indexOf(\"?\");\n  var anrIndex = queryString.indexOf(\"#\");\n\n  if (anrIndex == -1){\n    anrIndex = undefined;\n  }\n  queryString = queryString.substring(preIndex + 1,anrIndex);\n\n  queryString = queryString.replace(/^\\?/,\"\");\n  var kvStrList = queryString.split(\"&\");\n\n  return kvStrList.reduce(function (obj, kvStr) {\n    var kvList = kvStr.split(\"=\");\n    var key = decodeURIComponent(kvList[0]);\n    var value = decodeURIComponent(kvList[1]);\n    value = paramsPropParse(value,key,queryString);\n    obj[key] = value;\n\n    return obj;\n  },{});\n}\n\n\n\n\n//查询字符串：结束\n\n\n\n\n\n\n\n//类查询字符串：开始\n\n\n/**\n * similarQueryStringify(params,separOpts)\n * 将对类转化成 类似查询字符串格式的字符串\n *\n * @param params : Object    被序列化的参数对象\n * @param separOpts ? : {prop,kv,map}   可选；分隔符 和 值解析回调 的配置选项；\n * separOpts.prop ?: string     可选；默认值：\"&\"；属性与属性之间的分隔符；\n * separOpts.kv ?: string     可选；默认值：\"=\"；key 和 value 之间的分隔符；\n * separOpts.map  ? : (value,key,params)=> string    可选； 对 value 进行转换的函数；\n *\n * @returns string   序列化后的类查询字符串\n */\nexport function similarQueryStringify(params,separOpts) {\n\n  var {prop:propSeparator,kv:kvSeparator,map:paramsPropStringify} = separOpts || {};\n\n  if (propSeparator == null){\n    propSeparator = \"&\";\n  }\n\n  if (kvSeparator == null){\n    kvSeparator = \"=\";\n  }\n\n  if (!paramsPropStringify){\n    paramsPropStringify = function (value) {\n      return value;\n    };\n  }\n\n\n  var paramList = Object.entries(params).map(function (kvArr, index, array) {\n    var key = kvArr[0];\n\n    var value = kvArr[1];\n    value = paramsPropStringify.call(params,value,key,params);\n\n    return key + kvSeparator + value;\n  });\n\n  var queryString = paramList.join(propSeparator);\n\n  return queryString;\n}\n\n\n\n/**\n * parseSimilarQueryString(queryString,separOpts)\n * 解析 类似查询字符串格式的字符串\n *\n * @param queryString : string    被解析的类似查询字符串格式的字符串；\n * @param separOpts ? : {prop,kv,map}   可选；分隔符 和 值解析回调 的配置选项；\n * separOpts.prop ?: string     可选；默认值：\"&\"；属性与属性之间的分隔符；\n * separOpts.kv ?: string     可选；默认值：\"=\"；key 和 value 之间的分隔符；\n * separOpts.map  ? : (value,key,queryString)=> value    可选；对 value 进行转换\n *\n * @returns Object   解析后的对象\n */\nexport function parseSimilarQueryString(queryString,separOpts) {\n\n  var {prop:propSeparator,kv:kvSeparator,map:paramsPropParse} = separOpts || {};\n\n  if (propSeparator == null){\n    propSeparator = \"&\";\n  }\n\n  if (kvSeparator == null){\n    kvSeparator = \"=\";\n  }\n\n  if (!paramsPropParse){\n    paramsPropParse = function (value) {\n      return value;\n    };\n  }\n\n\n  var kvStrList = queryString.split(propSeparator);\n\n  return kvStrList.reduce(function (obj, kvStr) {\n    var kvList = kvStr.split(kvSeparator);\n    var key = kvList[0];\n    var value = kvList[1];\n    value = paramsPropParse(value,key,queryString);\n    obj[key] = value;\n\n    return obj;\n  },{});\n}\n\n\n\n//类查询字符串：结束\n\n\n\n\n\n\n//不依赖 URL 和 URLSearchParams 的解析：结束\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 普通解析与字符串化：结束\n\n\n\n\n\n\n\n\n\n\n\n\n// Object扩展：开始\n\n\nlet objectPropertyDescriptors = {\n\n\n\n  //URL相关：开始\n\n\n  /**\n   * toJSONqueryStringify(queryPrefix)\n   * 把当前对象 用JSON的方式格式化成 URL 的参数格式\n   * @param queryPrefix ? : boolean    可选；默认值：false; 是否带URL的查询字符串前缀 ?\n   * @returns 格式化后的 URL 的参数格式\n   *\n   * 说明\n   * 本方法是通过 JSONQueryStringify 方法进行格式化的\n   */\n  toJSONqueryStringify: {\n    enumerable: false,\n    value: function (queryPrefix) {\n      return JSONQueryStringify(this,queryPrefix);\n    }\n  },\n\n\n  //URL相关：结束\n\n\n};\n\n\n\n\nObject.defineProperties(Object.prototype, objectPropertyDescriptors);\n\n\n// Object扩展：结束\n\n\n\n// String扩展：开始\n\nlet stringPropertyDescriptors = {\n\n  /**\n   * 获取当前字符串经过 parseJSONQueryString 解析成的 对象；\n   *\n   * 说明：\n   * 本方法是通过 parseJSONQueryString 方法进行解析的；\n   */\n  urlJSONQueryObj:{\n    get:function () {\n     return parseJSONQueryString(this);\n    }\n  },\n};\n\n\n\nObject.defineProperties(String.prototype,stringPropertyDescriptors);\n\n\n// String扩展：结束\n","import {queryStringify,parseQueryString} from \"./ByURL\"\n\n\n/**\n * ByURLSearchParams 此类的功能与 URLSearchParams 一样，封装此类的目的是为在不支持 URLSearchParams 的环境中替代 URLSearchParams\n * 注意：此类的包含 URLSearchParams 的所有接口，所以在不支持 URLSearchParams 的环境中，此类可完全替代 URLSearchParams 类；\n */\nexport class ByURLSearchParams {\n\n  queryPrefix=false;  //在获取查询字符串时，是否要带前缀 ?\n  constructor(initSearch,paramsPropReplacer){\n    this.paramsPropReplacer = paramsPropReplacer;\n    this.initSearch = initSearch;\n  }\n\n\n\n\n\n  /**\n   * 原始输入的 search\n   * @param newValue\n   */\n  set initSearch(newValue){\n    this._initSearch = newValue;\n    if (newValue){\n      var params = newValue;\n      if (typeof newValue != \"object\"){\n        params = parseQueryString(newValue,this.paramsPropReplacer);\n      }\n      this.params = params;\n    }\n  }\n\n  get initSearch(){\n    return this._initSearch;\n  }\n\n\n\n\n\n  set params(newValue){\n    this._params = newValue;\n  }\n\n  get params(){\n    if (!this._params) {\n      this._params = {};\n    }\n    return this._params;\n  }\n\n\n  get search(){\n    return queryStringify(this.params,this.queryPrefix,this.paramsPropReplacer);\n  }\n\n  set search(newValue){\n    this.initSearch = newValue;\n  }\n\n\n\n\n  toString(queryPrefix = this.queryPrefix,paramsPropReplacer = this.paramsPropReplacer){\n    return queryStringify(this.params,queryPrefix,paramsPropReplacer);\n  }\n\n\n  append(name, value){\n    this.params[name] = value;\n  }\n\n  delete(name){\n    delete this.params[name];\n  }\n\n  entries(){\n    return Object.entries(this.params);\n  }\n\n  forEach(callback,thisArg){\n    this.entries().forEach(function (kvList) {\n      callback.call(thisArg,kvList[1],kvList[0],this);\n    }.apply,this);\n  }\n\n\n  get(name){\n    return this.params[name];\n  }\n\n  getAll(name){\n    let value = this.params[name];\n    return [value];\n  }\n\n  has(name){\n    return this.params.hasOwnProperty(name);\n  }\n\n  keys(){\n    return Object.keys(this.params);\n  }\n\n  set(name, value){\n    this.params[name] = value;\n  }\n\n  sort(){\n\n  }\n\n\n  values(){\n    return Object.values(this.params);\n  }\n\n\n\n\n\n}\n","import \"es-expand\"\n\nexport * from \"./ByURL\"\nexport * from \"./ByURLSearchParams\"\n\n\n/**\n * 通过把值转换成JSON字符来判断是否相等\n * @param value1 : any\n * @param value2 : any\n * @returns boolean\n *\n *\n * 注意：\n * - 方法能用于判断对象的内容是否相等，相等的条件是：这2个对象拥有相同的属性 和 属性值，且属性及属性的属性 的添加顺序是一致的；即：当两个对象的拥有相同的属性和属性值时，如果属性的定义的顺序不同，该方法会返回 false；\n * - 该方法依赖于 JSON.stringify() 的逻辑；\n */\nexport function isEqualOfJSON(value1, value2) {\n  return JSON.stringify(value1) == JSON.stringify(value2);\n}\n\n\n\n\n  //遍历优化：开始\n\n\n/**\n * multipleLoop(option)=> stopLoop()\n * 多次遍历、分批循环；可以把一个大遍历分成若干个小遍历来完成；\n * @param option : {loopCall,complete,stepComplete,thisValue,total,step,delay}   选项对象\n * @property option.loopCall : (index,stepCount,total)=>stopInfo : any  必选；每次循环的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n * @property option.stepComplete ？ : (index,stepCount,total)=>stopInfo : any  可选；每批循环完成时的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n * @property option.complete ？: (stopInfo,index,stepCount,total)=>Void  可选；循环结束时的回调函数； 入参 stopInfo : any 停止循环遍历时停止信息；入参  index : number  表示最后一次循环的 index，如果值为-1 表示没有进行过循环值终止了；入参 stepCount : number  表示已经遍历的批数、周期数；入参 total: number 循环的总数；\n * @property option.thisValue ? : any   loopCall、complete、stepComplete 回调函数的this的值；\n * @property option.total ? : number   可选；默认值：无穷大 Number.POSITIVE_INFINITY ; 设置总数循环次数；\n * @property option.step ? : number    可选； 默认值： 50 ； 设置每次遍历的循环次数；\n * @property option.delay ? : Timestamp   可选；默认值 ：0 ； 设置再次遍历的间隔时间；\n * @returns stopLoop : (stopInfo)=>Void    停止循环的函数；调用该函数，会终止正在进行的循环； 入参 stopInfo : any 停止循环的相关信息\n */\n\n\nexport function multipleLoop({loopCall,complete,stepComplete,thisValue,total=Number.POSITIVE_INFINITY,step = 50,delay = 0}) {\n\n\n  let index = 0;\n  let stepCount = 0;   //已经完成了多少批遍历\n\n\n  /**\n   * 设置是否要停止循环；\n   *\n   * 之所以通过函数来设置，而不是直接给stop变量赋值，是因为：\n   * - 确定 结束循环时 只调用一次  complete ；\n   */\n  let stop = false;    //停止循环的开关；表示是否终止循环；\n  function setStop(newValue){\n    if (newValue){\n      stop = newValue;\n\n      if (complete) {\n        complete.call(thisValue,stop,index,stepCount,total);\n      }\n    }\n  }\n\n\n  /**\n   * 是否需要循环；\n   * @returns boolean\n   *\n   * 之所以定义成函数形式，而不定义成变量，是因为：\n   * - 减少代码冗余；\n   * - 确定 结束循环时 只调用一次  complete ；\n   */\n  function loop(){\n    let needLoop = index < total;\n\n    if (!needLoop && complete) {\n      complete.call(thisValue,false,index-1,stepCount,total);\n    }\n    return needLoop\n  }\n\n\n  let timeoutId = null;\n\n\n\n\n\n\n  /**\n   * 自调用单次循环\n   */\n  function atuoSingleLoop() {\n    stepCount++;\n\n    let singleTotal = Math.min(index + step,total);\n\n    function singleLoop(){return index < singleTotal}\n\n    while (singleLoop() && !stop){\n      setStop(loopCall.call(thisValue,index,stepCount,total));\n      index++;\n    }\n\n    if (stepComplete){\n      setStop(stepComplete.call(thisValue,index-1,stepCount,total));\n    }\n\n\n    if (loop() && !stop){\n      timeoutId = setTimeout(atuoSingleLoop,delay);\n    }\n  }\n\n\n  /**\n   * 停止循环\n   */\n  function stopLoop(stopInfo) {\n    if (!stopInfo){\n      stopInfo = true;\n    }\n\n    clearTimeout(timeoutId);\n    setStop(stopInfo);\n  }\n\n\n\n  if (loop()){ //开始循环\n    atuoSingleLoop();\n  }\n\n\n  return stopLoop;\n}\n\n\nlet arrayPropertyDescriptors = {\n\n\n  /**\n   * multipleLoop(option)=> stopLoop()\n   * 多次遍历、分批循环；可以把一个大遍历分成若干个小遍历来完成；\n   * @param option : {loopCall,complete,stepComplete,thisValue,step,delay}   选项对象\n   * @property option.loopCall : (currentValue,index,stepCount,arr)=>stopInfo : any  必选；每次循环的回调函数；入参 currentValue : Item  当前index对应数组元素； 入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr:Array 当前被循环的数组； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n   * @property option.stepComplete ？ : (index,stepCount,arr)=>stopInfo : any  可选；每批循环完成时的回调函数；入参  index : number  表示当前循环的 index，从0开始；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr: Array 被循环的数组，即当前数组； 返回 stopInfo : any 停止循环并返回停止相关的信息；\n   * @property option.complete ？: (stopInfo,index,stepCount,arr)=>Void  可选；循环结束时的回调函数；入参 stopInfo : any 停止循环遍历时停止信息；入参  index : number  表示最后一次循环的 index，如果值为-1 表示没有进行过循环值终止了；入参 stepCount : number  表示已经遍历的批数、周期数；入参 arr: Array 被循环的数组，即当前数组；\n   * @property option.thisValue ? : any   可选；默认值：当前数组； loopCall、complete、stepComplete  回调函数的this的值；\n   * @property option.step ? : number    可选； 默认值： 50 ； 设置每次遍历的循环次数；\n   * @property option.delay ? : Timestamp   可选；默认值 ：0 ； 设置再次遍历的间隔时间；\n   * @returns stopLoop : (stopInfo)=>Void    停止循环的函数；调用该函数，会终止正在进行的循环； 入参 stopInfo : any 停止循环的相关信息\n   */\n  multipleLoop: {\n    enumerable: false,\n    value: function ({loopCall,complete,stepComplete,thisValue,step,delay}) {\n\n      if (thisValue){\n        thisValue = this;\n      }\n\n      let loopOpt = {\n        loopCall:(index,stepCount,total)=> {\n          return loopCall.call(thisValue,this[index],index,stepCount,this);\n        },\n        total:this.length,\n        step:step,\n        delay:delay\n      };\n\n      if (complete){\n        loopOpt.complete = (stopInfo,index,stepCount,total)=>{\n          return complete.call(thisValue,stopInfo,index,stepCount,this);\n        };\n      }\n\n      if (stepComplete){\n        loopOpt.stepComplete = (index,stepCount,total)=>{\n          return stepComplete.call(thisValue,index,stepCount,this);\n        };\n      }\n\n\n      return multipleLoop(loopOpt);\n    }\n  }\n\n};\n\n  Object.defineProperties(Array.prototype, arrayPropertyDescriptors);\n\n\n\n  //遍历优化：结束\n\n\n\n\n\n\n/**\n * safelyIterate(iterable,operation, thisValue)\n * 对 iterable  进行安全的迭代；与 for...of 的区别是：safelyIterate 能保证会迭代过程不会受 operation 中的行为的影响从而迭代每一个元素；\n * @param iterable : Iterable   必选； 可迭代的对象；\n * @param operation : (currentValue,currentIndex,iterable)=>boolean | undefined     执行的操作， 该函数的返回值表示是否要过滤出该元素\n * @param thisValue ? : any   可选，默认值是 iterable ；操作 operation 的 this 值\n * @returns [Item]  返回被 operation 过滤出的元素\n *\n *\n * operation(currentValue,currentIndex,iterable)=>boolean | undefined\n * @param currentValue : any   调用 operation 时的元素的值；\n * @param currentIndex : number     currentValue 在原始 iterable 中 对应的迭代索引值；\n * @param iterable : Iterable   被迭代的 iterable ；\n * @returns boolean | undefined  表示是否要过滤出 currentValue ；\n *\n */\nexport function safelyIterate(iterable,operation, thisValue) {\n\n  if (thisValue == undefined) {\n    thisValue = iterable;\n  }\n\n  let arrayCopy = [];\n\n  for (let value of iterable){\n    arrayCopy.push(value);\n  }\n\n  let filterItem = arrayCopy.filter(function (currentValue) {\n    let currentIndex = this.indexOf(currentValue);\n    operation.call(thisValue, currentValue, currentIndex, iterable);\n  },arrayCopy);\n\n\n  return filterItem;\n\n}\n\n\n\n\n\n\n//类型：开始\n\n\n/**\n * 获取 inst 的类型\n * @param inst : any\n * @returns Type    inst 的类型\n *\n *\n *\n * 注意：\n * 本方法返回的结果如下：\n * undefined ：undefined\n * null ： null\n * 其它任何类型的实例  : 返回该实例的构造函数  或 包装对象的构造函数\n *\n */\nexport function getTypeOf(inst) {\n  var typeInfo = inst;\n  if (inst != null){\n    typeInfo = inst.constructor;\n  }\n\n  return typeInfo;\n\n}\n\n\n\n\n\n/**\n * 获取 inst 的类型字符串\n * @param inst : any\n * @returns string    inst 的类型字符串\n *\n *\n *\n * 注意：\n * 本方法返回的结果如下：\n * undefined ：\"undefined\"\n * null ： \"null\"\n * 其它任何类型的实例  : 返回该实例的构造函数  或 包装对象的构造函数 的函数名字\n *\n */\nexport function getTypeStringOf(inst) {\n\n  switch (inst){\n    case undefined:{\n      var typeStr = \"undefined\";\n      break;\n    }\n\n    case null:{\n      typeStr = \"null\";\n      break;\n    }\n\n    default:{\n      typeStr = inst.constructor.name;\n    }\n  }\n\n  return typeStr;\n\n}\n\n\n\n//类型：结束\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 定义可监听的属性\n *\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param prop : string   必选；要定义的属性的名称。\n * @param options ?: {ready ?:string,noEvent ?:boolean,event ?:string,newValueKey ?:string,oldValueKey ?:string,getDefault ?:(thisValue)=>PropValue}     可选；配置选项；各个选项的说明如下；\n * @property  ready ?:string    可选；默认值：prop + \"Ready\" ；ready属性的属性名字；\n * @property  noEvent ?:boolean    可选；默认值：false ；是否要给 prop 属性增加值变更事件；\n * @property  event ?:string    可选；默认值：prop +  \"Change\" ；prop变更事件的名字；\n * @property  newValueKey ?:string    可选；默认值：\"value\" ；prop变更事件的事件对象中保存新值的属性名字；\n * @property  oldValueKey ?:string    可选；默认值：\"oldValue\" ；prop变更事件的事件对象中保存旧值的属性名字；\n * @property  getDefault ?:(thisValue)=>PropValue    可选；在获取 prop 属性的值时，如果 prop 属性的值不存在 ，则会通过 该函数获取默认的值；\n *\n *\n * @returns obj : Object  被传递给函数的对象。\n */\nexport function defineListenableProperty(obj,prop,options){\n  let {ready:readyName = prop + \"Ready\",noEvent,event:eventName = prop +  \"Change\",newValueKey = \"value\",oldValueKey = \"oldValue\",getDefault} = options || {};\n  let priReadyName = \"_\" + readyName;\n  let priProp = \"_\" + prop;\n\n\n\n  /**\n   * 给 obj 定义 ready 计算属性 ，用于获取客户端的准备状态的promise ，当访问 ready 时，如果 ready 不存在，则会自动创建\n   */\n  Object.defineProperty(obj, readyName, {\n    configurable:true,\n    enumerable:true,\n    get: function () {\n      let _this = this || window;\n      if (!_this[priReadyName]) {\n        let propValue = _this[priProp];\n        if (propValue){\n          _this[priReadyName] = Promise.resolve(propValue);\n        }else {\n          _this[priReadyName] = createControllablePromise();\n        }\n\n      }\n      return _this[priReadyName];\n    },\n    set:function (newValue) {\n      let _this = this || window;\n      _this[priReadyName] = newValue;\n    }\n  });\n\n\n\n  //创建 prop 的 get 方法\n  if (getDefault){\n\n    var propGetter = function () {\n      let _this = this || window;\n      if (!_this[priProp] && getDefault) {\n        _this[prop] = getDefault.call(_this,_this);\n      }\n      return _this[priProp];\n    }\n\n  }else {\n\n    propGetter = function () {\n      let _this = this || window;\n      return _this[priProp];\n    }\n\n  }\n\n\n  //创建 prop 的 set 方法\n\n  if (noEvent){\n\n\n    var propSetter =  function (newValue) {\n      let _this = this || window;\n      if (newValue && newValue !== _this[priProp]) {\n\n\n        let oldValue = _this[priProp];\n        _this[priProp] = newValue;\n\n        let httpReady = _this[readyName];\n        if (httpReady.resolve) {\n          httpReady.resolve(newValue);\n        }else {\n          _this[readyName] = Promise.resolve(newValue);\n        }\n\n      }\n    }\n\n  }else {\n\n\n    propSetter =  function (newValue) {\n      let _this = this || window;\n      if (newValue && newValue !== _this[priProp]) {\n\n\n        let oldValue = _this[priProp];\n        _this[priProp] = newValue;\n\n        let httpReady = _this[readyName];\n        if (httpReady.resolve) {\n          httpReady.resolve(newValue);\n        }else {\n          _this[readyName] = Promise.resolve(newValue);\n        }\n\n        //派发 change 事件\n        let change = new Event(eventName, {\"bubbles\": true});\n        change[newValueKey] = newValue;\n        change[oldValueKey] = oldValue;\n        window.dispatchEvent(change);\n\n\n      }\n    }\n\n  }\n\n\n\n\n\n  /**\n   * 给 obj 对象 添加计算属性 prop ，用以获取 prop\n   *\n   * 注意：\n   * 当 prop 的值变更时，会在 window 上触发该属性的 change 事件\n   * 通过事件的 event[newValueKey] 可能获取改变后的新值\n   * 通过事件的 event[oldValueKey] 可能获取改变前的旧值\n   */\n  Object.defineProperty(obj, prop, {\n    configurable:true,\n    enumerable:true,\n    get: propGetter,\n    set: propSetter\n  });\n\n\n  return obj;\n}\n\n\n\n\n\n/**\n * 批量定义可监听的属性\n *\n * 接口1：defineListenableProperties(obj,propOptions)\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param propOptions : {propName:options}   必选；要定义的属性的配置对象；以该配置对象的属性属性为 要配置的属性的名字，以其值为 本配置的属性的 配置选项\n * @returns obj : Object  被传递给函数的对象。\n *\n *\n * 接口2：defineListenableProperties(obj,propArray,options)\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param propArray : [string]   必选；要在其上定义的属性的名字列表。\n * @param options ?: {ready ?:string,noEvent ?:boolean,event ?:string,newValueKey ?:string,oldValueKey ?:string,getDefault ?:(thisValue)=>PropValue}     可选；配置选项；各个选项的说明如下；\n *\n * @returns obj : Object  被传递给函数的对象。\n */\nexport function defineListenableProperties(obj,props,options){\n\n  var propsObj = props;\n  if (Array.isArray(props)) {\n    propsObj = props.reduce(function (total,propName) {\n      total[propName] = options;\n      return total;\n    },{});\n  }\n\n\n  Object.keys(propsObj).forEach(function (propName) {\n    let propOpts = propsObj[propName];\n    defineListenableProperty(obj,propName,propOpts);\n  });\n\n  return obj;\n}\n\n\n/**\n * defineListenablePropertyGetter(obj, prop, getDefault, asGetter)\n * 定义可监听属性的 getter ； 该方法一般经常用于：一些可监听属性在被定义时，还不能定义 getDefault 选项，只能在稍后某个时刻定义 getDefault 选项，此时便可用此函数来简化重新定义 getter 的操作；\n * @param obj : Object   必选；要在其上定义属性的对象。\n * @param prop : string   必选；要定义的属性的名称。\n * @param  getDefault ?:(thisValue)=>PropValue    可选；在获取 prop 属性的值时，如果 prop 属性的值不存在 ，则会通过 该函数获取默认的值；\n * @param asGetter ?: boolean    可选；是否将 getDefault 作为 getter\n */\nexport function defineListenablePropertyGetter(obj, prop, getDefault, asGetter) {\n\n  let priProp = \"_\" + prop;\n\n  if (asGetter) {\n    var propGetter = getDefault;\n  } else if (getDefault) {\n\n    propGetter = function () {\n      let _this = this || window;\n      if (!_this[priProp] && getDefault) {\n        _this[prop] = getDefault.call(_this, _this);\n      }\n      return _this[priProp];\n    }\n\n  } else {\n\n    propGetter = function () {\n      let _this = this || window;\n      return _this[priProp];\n    }\n\n  }\n\n\n  Object.defineProperty(obj, prop, {\n    configurable:true,\n    enumerable:true,\n    get: propGetter\n  });\n}\n\n\n/**\n * 生成唯一的标识符\n * @returns {string}\n */\nexport function createUniqueIdentifier() {\n  var currentDate = new Date();\n  return currentDate.getTime().toString() + Math.random();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * createControllablePromise(executor ?:(resolve, reject)=>Void)\n * 创建外部可控制的改变 Promise 状态 Status 的 Promise 对象；该 Promise 对象在 状态 未完成之前，会有 resolve、reject、clearAdditions 三个方法，当 Promise 的状态完成时，resolve、reject、clearAdditions 这三个方法会自动被删除；其中 clearAdditions 方法是用来 清除 该实例的 resolve、reject、clearAdditions 这三个方法的；\n *\n * @param executor ?: (resolve, reject)=>Void    可选；executor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数，\n * @param statusCompletesImmediately ?: boolean   可选；默认值：true； 该参数表示在 executor 函数中是否会立即（同步）调用 resolve 或 reject ；如果是，则会把 executor 函数变成异步执行，以来避免在执行 clearAdditions 时引用 还未创建的 真实的 promise 实例；\n * @returns Promise   返回一个带有 resolve、reject 和 clearAdditions  三个方法的 Promise 实例，在该实例的 状态没有改变之前 ，通过 resolve 和 reject 这两个方法，可以改变 Promise 的状态，并且会自动调用 clearAdditions 方法来清除  resolve、reject、clearAdditions 这三个方法； clearAdditions 方法用来清除 resolve、reject 和 clearAdditions  这三个方法的\n */\nexport function createControllablePromise(executor,statusCompletesImmediately) {\n  let executorIsvalid = typeof executor == \"function\";\n  if (executorIsvalid && statusCompletesImmediately == undefined){\n    statusCompletesImmediately = true\n  }\n\n\n  var oriFuns = {};\n\n  function clearAdditions() {\n    caPromise.resolve = undefined;\n    caPromise.reject = undefined;\n    caPromise.clearAdditions = undefined;\n  }\n\n  function resolveFun(value) {\n    clearAdditions();\n    oriFuns.resolve(value);\n  }\n\n  function rejectFun(reason) {\n    clearAdditions();\n    oriFuns.reject(reason);\n  }\n\n\n  var caPromise = new Promise(function (resolve, reject) {\n    oriFuns.resolve = resolve;\n    oriFuns.reject = reject;\n    if (executorIsvalid) {\n      if (statusCompletesImmediately) {\n        setTimeout(executor,0,resolveFun, rejectFun);\n      }else {\n        return executor(resolveFun, rejectFun);\n      }\n    }\n  });\n\n  caPromise.clearAdditions = clearAdditions;\n  caPromise.resolve = resolveFun;\n  caPromise.reject = rejectFun;\n\n\n  return caPromise;\n}\n","import './Object'\nimport './Array'\nimport './JSON'\nimport './String'\nimport './Math'\nimport './Number'\nimport './Date'\n\n","import \"es-expand\"\nimport \"dom-expand\"\nimport \"bom-expand\"\nexport * from \"com-tools\"\nexport * from \"bro-tools\"\n","\n/*\n 使用属性描述来定义属性的原因：\n - 为了不让 for...in 等类似的操作遍历这些定义在原型上的方法或属性，需要将属性设置为不可枚举的；\n - 为了解决给 Object.prototype 添加属性会在Vue中报错的问题，需要将属性设置为不可枚举的；\n\n\n 注意：\n - Object.prototype 和  Object 上不能定义同名成员；\n */\n\n\n\nlet propertyDescriptors = {\n\n\n  /**\n   * 找出对象中符合测试函数的属性名\n   * @param testFun:(propValue,propkey,index)=> boolean  ; 测试条件函数\n   */\n  findKey: {\n    enumerable: false,\n    value: function (testFun) {\n      return Object.keys(this).find((key, index) => {\n        let propValue = this[key];\n        return testFun(propValue, key, index);\n      });\n\n    }\n  },\n\n\n  /**\n   * 找出对象中符合测试函数的属性信息\n   * @param testFun:(propValue,propkey,index)=> boolean  ; 测试条件函数\n   * @return PropertyInfo : {key:string,value:any}\n   */\n  findProperty: {\n    enumerable: false,\n    value: function (testFun) {\n\n      let prop = Object.entries(this).find((entry, index) => {\n        return testFun(entry[1], entry[0], index);\n      });\n\n\n      let propInfo = {\n        key: null,\n        value: null\n      };\n\n      if (prop) {\n        propInfo.key = prop[0];\n        propInfo.value = prop[1];\n      }\n\n      return propInfo;\n    }\n  },\n\n\n  /**\n   * 检验该对象自身是否是扁平的，即：该对象的所有的直接属性的属性值都是非对象类型；\n   */\n  isFlat: {\n    enumerable: false,\n    get: function () {\n      let noFlat = Object.values(this).some(function (propValue) {\n        let propType = typeof propValue;\n        return propValue && (propType === \"object\" || propType === \"function\");\n      });\n\n      return !noFlat;\n    }\n  },\n\n\n\n\n  /**\n   * 返回对象是否是空的对象，即没有自己的可枚举的属性\n   */\n  noKeys:{\n    enumerable:false,\n    get:function(){\n      return Object.keys(this).length == 0;\n    }\n  },\n\n\n\n\n\n  /**\n   * 获取对象中拥有的 相应key的值；\n   * @param keys:[string]  指定的key的数组\n   * @return [any]    对象中拥有的相应key的值\n   */\n  getValuesOfKeys: {\n    enumerable: false,\n    value: function (keys) {\n\n      var _this = this ;\n      return keys.reduce(function(total, currentKey){\n        if (currentKey in _this){\n          total.push(_this[currentKey]);\n        }\n        return total;\n      }, []);\n\n    }\n  },\n\n\n\n  /**\n   * 获取对象中拥有的 相应key的 有效值；\n   * 注意：不包含值为 undefined 或 null 的值\n   * @param keys:[string]  指定的key的数组\n   * @return [any]    对象中拥有的相应key的有效值\n   *\n   */\n  getVirtualValuesOfKeys: {\n    enumerable: false,\n    value: function (keys) {\n\n      var _this = this ;\n      return keys.reduce(function(total, currentKey){\n        var currValue = _this[currentKey] ;\n        if (currValue != undefined){\n          total.push(currValue);\n        }\n        return total;\n      }, []);\n\n    }\n  },\n\n\n\n\n\n  /**\n   * 查找对象中所有指定的属性中的第一个有效值\n   * @param keys : [string]   被查找的属性列表\n   * @returns any  对象中所有指定的属性中的第一个有效值\n   */\n  findValueOfKeys: {\n    enumerable: false,\n    value: function (keys) {\n      var findValue ;\n\n      keys.find(function(currentKey){\n        var currValue = this[currentKey] ;\n        var valid =  currValue != undefined\n        if (valid){\n          findValue = currValue ;\n        }\n        return valid ;\n\n      },this);\n\n\n      return findValue;\n\n    }\n  },\n\n\n\n  /**\n   * 获取对象中所有指定格式的属性的值列表\n   * @param key : string   基本的属性字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns [any]  对象中所有指定格式的属性的值列表\n   */\n  getValuesForKeyFormats: {\n    enumerable: false,\n    value: function (key,formats) {\n      var keyStrList = key.getAllStrForFormats(formats);\n      return this.getValuesOfKeys(keyStrList);\n    }\n  },\n\n\n  /**\n   * 获取对象中所有指定格式的属性的有效值列表\n   * @param key : string   基本的属性字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns [any]  对象中所有指定格式的属性的值列表\n   */\n  getVirtualValuesForKeyFormats: {\n    enumerable: false,\n    value: function (key,formats) {\n      var keyStrList = key.getAllStrForFormats(formats);\n      return this.getVirtualValuesOfKeys(keyStrList);\n    }\n  },\n\n\n  /**\n   * 查找对象中所有指定格式的属性的第一个有效值\n   * @param key : string   基本的属性字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns any  对象中所有指定格式的属性的第一个有效值\n   */\n  findValueForKeyFormats: {\n    enumerable: false,\n    value: function (key,formats) {\n      var keyStrList = key.getAllStrForFormats(formats);\n      return this.findValueOfKeys(keyStrList);\n    }\n  },\n\n\n\n\n\n  //集合：开始\n\n  /**\n   * 判断当前对象是否是指定对象的子集；即当前对象自己的所有可枚举属性 及 值 是否都包含于 指定的对象上；\n   * @param universalObj : Object   全集对象\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns boolean   当前对象是否是指定对象的子集\n   */\n  isSubsetOf: {\n    enumerable: false,\n    value: function (universalObj,equalTest) {\n\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      let thisEntries = Object.entries(this);\n\n      return thisEntries.every(function(entrie,index){\n        let key = entrie[0];\n        let value = entrie[1];\n        return equalTest.call(this,value,universalObj[key]);\n      },this);\n\n    }\n  },\n\n\n\n  //集合：结束\n\n\n  /**\n   * depthLoopOwnProperty(callback,depth,all,thisValue,initDepth)=> stopInfo\n   * 递归遍历自身属性链中的所有属性\n   * @param callback : (key,value,obj,currDepth))=> stopInfo : any    必选； 循环遍历的回调函数； key : 当前被遍历的属性名；value : 当前被遍历的属性值；obj : 当前被遍历的属性所属的对象；currDepth : 当前遍历的深度值，从 initDepth 所表示的值开始计数；返回值 stopInfo : 表示是否中止循环，并且该值会被 depthLoopOwnProperty 函数返回，如果返回的值是真值，则终止循环；\n   * @param depth ? : number    可选；默认值：-1 ,即无限深度； 要循环遍历的深度；\n   * @param all ? : boolean    可选；默认值: false ;  是否遍历自身所有的属性，包括不可枚举的；\n   * @param thisValue ? : any    可选；   callback 回调函数的this值 ；默认值：当前被遍历的属性所属的对象；\n   * @param initDepth ? : number   可选；默认值：1；深度的初始值； 注意：设计该属性的主要目的是为了递归调用时记录当前传递当前的深度值的；\n   * @returns stopInfo ： any   终止循环时返回的信息；\n   */\n  depthLoopOwnProperty:{\n    enumerable: false,\n    value:function (callback,depth,all,thisValue,initDepth) {\n      if (depth == undefined){\n        depth = -1;\n      }\n\n      if (depth == 0){\n        return;\n      }\n\n      if (initDepth == undefined){\n        initDepth = 1;\n      }\n\n\n      if (thisValue === undefined) {\n        thisValue = this;\n      }\n\n      if (all){\n        var keyList = Object.getOwnPropertyNames(this);\n      } else {\n        keyList = Object.keys(this);\n      }\n\n      //中止遍历\n      var stopInfo;\n\n      for (let key of keyList){\n        let value = this[key];\n        if (typeof value == \"object\"){\n          stopInfo = value.depthLoopOwnProperty(callback,depth-1,all,thisValue,initDepth+1);\n          if (stopInfo){\n            break;\n          }\n        }\n\n        stopInfo = callback.call(thisValue,key,value,this,initDepth);\n        if (stopInfo){\n          break;\n        }\n\n      }\n\n\n      return stopInfo;\n    }\n\n\n  },\n\n\n\n  /**\n   * depthLoopPropertyWithPrototype(callback,depth,thisValue,initDepth)=> stopInfo\n   * 递归遍历自身包括原型的属性链中的所有可枚举的属性\n   * @param callback : (key,value,obj,currDepth))=>stopInfo : any    必选； 循环遍历的回调函数； key : 当前被遍历的属性名；value : 当前被遍历的属性值；obj : 当前被遍历的属性所属的对象；currDepth : 当前遍历的深度值，从 initDepth 所表示的值开始计数；返回值 stopInfo : 表示是否中止循环，并且该值会被 depthLoopOwnProperty 函数返回，如果返回的值是真值，则终止循环；\n   * @param depth ? : number    可选；默认值：-1 ,即无限深度； 要循环遍历的深度；\n   * @param thisValue ? : any    可选；   callback 回调函数的this值 ；默认值：当前被遍历的属性所属的对象；\n   * @param initDepth ? : number   可选；默认值：1；深度的初始值； 注意：设计该属性的主要目的是为了递归调用时记录当前传递当前的深度值的；\n   * @returns stopInfo ： any   终止循环时返回的信息；\n   */\n  depthLoopPropertyWithPrototype:{\n    enumerable: false,\n    value:function (callback,depth,thisValue,initDepth) {\n      if (depth == undefined){\n        depth = -1;\n      }\n\n      if (depth == 0){\n        return;\n      }\n\n      if (initDepth == undefined){\n        initDepth = 1;\n      }\n\n\n      if (thisValue === undefined) {\n        thisValue = this;\n      }\n\n      //中止遍历\n      var stopInfo;\n\n      for (let key in this){\n\n        let value = this[key];\n        if (typeof value == \"object\"){\n          stopInfo = value.depthLoopPropertyWithPrototype(callback,depth-1,thisValue,initDepth+1);\n          if (stopInfo){\n            break;\n          }\n        }\n\n        stopInfo = callback.call(thisValue,key,value,this,initDepth);\n        if (stopInfo){\n          break;\n        }\n      }\n\n      return stopInfo;\n\n    }\n  },\n\n\n  /**\n   * filterProperty(filter,thisValue)\n   * 返回包含符合条件的所有属性的新对象\n   * @param filter : (key,value,obj)=>boolean    必选；\n   * @param thisValue ? : any   可选；默认值：当前对象； filter 函数的this 值；\n   * @returns Object   返回包含符合条件的所有属性的新对象\n   */\n  filterProperty:{\n    enumerable: false,\n    value:function (filter,thisValue) {\n      if (arguments.length < 2){\n        thisValue = this;\n      }\n\n      return Object.entries(this).reduce((preValue,entr)=> {\n        var key = entr[0];\n        var value  = entr[1];\n        if (filter.call(thisValue,key,value,this)){\n          preValue[key] = value;\n        }\n        return preValue;\n      },{});\n    },\n  },\n\n\n};\n\n\nObject.defineProperties(Object.prototype, propertyDescriptors);\n\n\n/**\n * 用于将所有指定的属性的值从源对象复制到目标对象。它将返回目标对象。\n * @param target : Object     目标对象。\n * @param keys : Array<String>   需要复制的属性名数组\n * @param ...sources : Object    源对象参数序列\n * @return target    返回目标对象\n */\n\nObject.assignKeys = function (target,keys,...sources){\n\n  if (keys) {\n\n    let keysSourceList = sources.map(function (source) {\n\n      return keys.reduce(function (newSource, aKey) {\n        let aValue = source[aKey];\n\n        if (aValue !== undefined) {\n          newSource[aKey] = aValue;\n        }\n\n        return newSource;\n\n      }, {});\n\n    });\n\n\n    Object.assign(target,...keysSourceList);\n\n  }\n\n\n  return target ;\n};\n\n\n/**\n * 用于将所有指定的属性之外的所有属性和值从源对象复制到目标对象。它将返回目标对象。\n * @param target : Object     目标对象。\n * @param keys : Array<String>   需要排除的属性名数组\n * @param ...sources : Object    源对象参数序列\n * @return target    返回目标对象\n */\n\nObject.assignExcludeKeys = function (target,keys,...sources){\n\n  if (keys) {\n\n    let keysSourceList = sources.map(function (source) {\n      let allKeys = Object.keys(source);\n      let validKeys = keys.getComplementOn(allKeys);\n\n      return validKeys.reduce(function (newSource, aKey) {\n        let aValue = source[aKey];\n\n        if (aValue !== undefined) {\n          newSource[aKey] = aValue;\n        }\n\n        return newSource;\n\n      }, {});\n\n    });\n\n\n    Object.assign(target,...keysSourceList);\n\n  }\n\n\n  return target ;\n};\n\n\n\n/**\n * 用于将所有符合 options 配置 的属性和值从源对象复制到目标对象。它将返回目标对象。\n * @param target : Object     目标对象。\n * @param options : IncludeAndExcludeKeysOptions  必须；配置 包含 和 排除 的 key 的 数组 的 选项；\n * @param ...sources : Object    源对象参数序列\n * @return target    返回目标对象\n *\n * IncludeAndExcludeKeysOptions = {include ?: Array,exclude ?: Array}\n */\n\nObject.assignIncludeAndExcludeKeys = function (target,options,...sources){\n\n  if (options && !options.noKeys) {\n\n    let keysSourceList = sources.map(function (source) {\n      let allKeys = Object.keys(source);\n      let validKeys = allKeys.getIncludeAndExclude(options);\n\n      return validKeys.reduce(function (newSource, aKey) {\n        let aValue = source[aKey];\n\n        if (aValue !== undefined) {\n          newSource[aKey] = aValue;\n        }\n\n        return newSource;\n\n      }, {});\n\n    });\n\n\n    Object.assign(target,...keysSourceList);\n\n  }\n\n\n  return target ;\n};\n\n\n\n\n\n\n\n//兼容：开始\n\n//Object.entries(obj)\nif (!Object.entries) {\n  Object.entries = function( obj ){\n    var ownProps = Object.keys( obj ),\n      i = ownProps.length,\n      resArray = new Array(i);\n    while (i--){\n      var key = ownProps[i];\n      resArray[i] = [key, obj[key]];\n    }\n\n    return resArray;\n  };\n}\n\n\n\n\n//Object.fromEntries(entries)\nif (!Object.fromEntries) {\n  Object.fromEntries = function( entries ){\n    return entries.reduce(function(obj, entry){\n      obj[entry[0]] = entry[1];\n      return obj;\n    }, {});\n  };\n}\n\n\n\n//兼容：结束\n\n\n\n\n\n\n\n\n\n\n/**\n * 定义代理属性； 给 对象 proxy 增加 能够代理 target 对象 的 属性 prop；\n * 当在 访问或配置 proxy 对象上的 prop 属性时，会将操作转发到 target 对象的 prop 属性；\n *\n * @param proxy : Object   必选；会在该对象上添加代理属性 prop\n * @param target : Object   必选；被代理的对象\n * @param prop : Property   必选；代理属性的名字；\n * @param options ?: ProxyOptions  代理属性的配置选项\n *\n * ProxyOptions = {get:boolean,set:boolean,configurable:boolean,enumerable:boolean,getDefault,setDefault}\n * get:boolean  可选；默认值：true； 表示是否要定义 get 的代理；\n * set:boolean  可选；默认值：true； 表示是否要定义 set 的代理；\n * configurable:boolean  可选；默认值：true； 表示该属性描述符的类型是否可以被改变并且该属性可以从对应对象中删除。\n * enumerable:boolean  可选；默认值：true； 表示当在枚举相应对象上的属性时该属性是否显现。\n * getDefault:any  可选；当 target 的属性 prop 为 undefined 时，proxy 会返回默认值 getDefault\n * setDefault:any  可选；当给代理对象 proxy 的 prop 属性 设置的 新值是 undefined 时，会将默认值 setDefault 设置 到 target 对象的 prop 属性上；\n *\n * @returns proxy : Object  传递给函数的 代理对象 proxy\n */\n\nObject.defineProxyProperty = function (proxy,target,prop, options) {\n  var {get = true,set = true,configurable = true,enumerable = true,getDefault,setDefault} = options || {};\n\n  var descriptor = {configurable,enumerable};\n\n  if (get){\n    descriptor.get = function () {\n      var propValue = target[prop];\n      return propValue === undefined ? getDefault : propValue;\n    };\n  }\n\n  if (set){\n    descriptor.set = function (newValue) {\n      newValue = newValue === undefined ? setDefault : newValue;\n      target[prop] = newValue;\n    };\n  }\n\n\n  Object.defineProperty(proxy,prop,descriptor);\n  return proxy;\n};\n\n\n\n\n\n/**\n * 批量定义代理属性\n *\n * 接口1：defineProxyProperties(proxy,target,propOptions)\n * @param proxy : Object   必选；会在该对象上添加代理属性 prop\n * @param target : Object   必选；被代理的对象\n * @param propOptions : {propName:ProxyOptions}   必选；要定义的代理属性的配置对象；以该配置对象的属性名为 要配置的属性的名字，以其值为 本配置的属性的 配置选项\n * @returns proxy : Object  传递给函数的 代理对象 proxy\n *\n *\n * 接口2：defineProxyProperties(proxy,target,propArray,options)\n * @param proxy : Object   必选；会在该对象上添加代理属性 prop\n * @param target : Object   必选；被代理的对象\n * @param propArray : [string]   必选；要定义的代理属性的名字的列表。\n * @param options ?: ProxyOptions     可选；所有代理属性的配置选项\n *\n *  @returns proxy : Object  传递给函数的 代理对象 proxy\n */\nObject.defineProxyProperties = function (proxy,target,props, options) {\n  var propsObj = props;\n  if (Array.isArray(props)) {\n    propsObj = props.reduce(function (total,propName) {\n      total[propName] = options;\n      return total;\n    },{});\n  }\n\n\n\n  Object.keys(propsObj).forEach(function (propName) {\n    let propOpts = propsObj[propName];\n    Object.defineProxyProperty(proxy,target,propName,propOpts);\n  });\n\n  return proxy;\n};\n\n\n/**\n * isDepthEqual(a, b, nullNotEqualUndefined)\n * 深度测试  a 和 b 是否完全相等；如果 a 和 b 是 对象，会进行递归相等测试，只有所有的属性 都相等时，才会认为是相等的；\n *\n * 注意：\n * - 对于 值为 undefined 的属性 和 不存在的属性 认为是相等的属性；\n * - 对于 对于 函数 ，如果整个函数的代码字符（fun.toString()）串相等，则认为函数是相等的；\n * - 目前只判断了 基础类型、Object、Array、function、Date 类型；\n *\n * @param a : any\n * @param b : any\n * @param nullNotEqualUndefined ? : boolean    可选；默认值：false;  是否把 null 和 undefined 作为不等的值来对待\n * @return boolean\n */\nObject.isDepthEqual = function isDepthEqual(a, b, nullNotEqualUndefined) {\n\n  if (a === b || Object.is(a,b)) {\n    return true\n  }\n\n  if (!nullNotEqualUndefined && a == null && a == b) {\n    return true;\n  }\n\n  var aType = typeof a;\n  var bType = typeof b;\n  if (a != undefined && b != undefined){\n    var aClassName = a.constructor.name;\n    var bClassName = b.constructor.name;\n  }\n\n\n  if (aType != bType ) {\n    if (aClassName && aClassName == bClassName){ //测试 基础类型 与 其包装类型 的相等性\n      return a == b;\n    }\n    return false;\n  }\n\n  if  (aType == \"function\"){\n    return  a == b || a.toString() == b.toString() ;\n  }\n\n  if (aType == \"Date\"){\n    return  a.getTime() == b.getTime();\n  }\n\n  if (aType == \"object\") {\n    var isArr = Array.isArray(a);\n    if (isArr != Array.isArray(b)) {\n      return false;\n    }\n\n    if (isArr) {\n      if (a.length != b.leading) {\n        return false;\n      }\n\n      return a.every(function (aValue, index) {\n        var bValue = b[index];\n        return Object.isDepthEqual(aValue, bValue, nullNotEqualUndefined);\n      });\n\n    }\n\n    var aEntrs = Object.entries(a);\n    var bEntrs = Object.entries(b);\n    if (nullNotEqualUndefined) {\n      aEntrs = aEntrs.filter(function (entr) {\n        return entr[1] !== undefined\n      });\n      bEntrs = bEntrs.filter(function (entr) {\n        return entr[1] !== undefined\n      });\n    } else {\n      aEntrs = aEntrs.filter(function (entr) {\n        return entr[1] != undefined\n      });\n      bEntrs = bEntrs.filter(function (entr) {\n        return entr[1] != undefined\n      });\n    }\n\n    if (aEntrs.length != bEntrs) {\n      return false;\n    }\n\n    return aEntrs.every(function (aEntr) {\n      var key = aEntr[0];\n      var aValue = aEntr[1];\n      var bValue = b[key];\n      return Object.isDepthEqual(aValue, bValue, nullNotEqualUndefined);\n    });\n\n\n  }\n\n  return a == b;\n};\n","\n/*\n 使用属性描述来定义属性的原因：\n - 为了不让 for...in 等类似的操作遍历这些定义在原型上的方法或属性，需要将属性设置为不可枚举的；\n - 为了解决给 Object.prototype 添加属性会在Vue中报错的问题，需要将属性设置为不可枚举的；\n */\n\n\nlet propertyDescriptors = {\n\n\n  //去重：开始\n\n\n  /*\n  getNoRepeats()\n  获取去除重复项目后的数组\n\n  ## 注意\n  - 该方法不改原数组，会返回一个新的数组；\n  - 该方法是通过 严格相等 `===` 运算符来判断 数组的元素是否重复的；\n  */\n  getNoRepeats: {\n    enumerable: false,\n    value: function () {\n\n      return this.filter(function (currentItem, index, arr) {\n        return index === arr.indexOf(currentItem);\n      });\n\n    }\n  },\n\n\n  /**\n   getNoRepeatsUseRepeatTest(isRepeated)\n   根据重复测试函数 `isRepeated` 来获取去除重复项目后的新数组\n\n   - @param isRepeated  : (item1,item2)=> boolean      重复油测试函数，传入被测试的2个项目，返回布尔值，表示这2个项目是否是重复的；\n   - @returns : Array  返回去除重复项目后的新数组\n\n   ## 注意\n   - 该方法不改原数组，会返回一个新的数组；\n   - 该方法是通过 isRepeated 函数来判断 数组的元素是否重复的；\n   */\n  getNoRepeatsUseRepeatTest: {\n    enumerable: false,\n    value: function (isRepeated) {\n\n      return this.filter(function (currentItem, index, arr) {\n        return index === arr.findIndex(function (findItem) {\n          return isRepeated(findItem, currentItem);\n        });\n      });\n\n    }\n  },\n\n\n  //去重：结束\n\n\n\n\n\n\n\n\n\n  //安全操作：开始\n\n  /*\n  JavaScript 数组中与遍历相关的方法都是非安全 和 非严谨的，当在遍历时增删原始数组的元素时，会引出问题；\n  详情请参考文章：https://www.jianshu.com/p/6dd641d0c13d\n\n  以下 安全操作 的方法便是用来解决这些问题的；\n   */\n\n\n\n\n  /**\n   * safelyOperateIndexs(indexList, operation, thisValue)\n   * 安全操作指定的索引\n   * @param indexList : [Index]   需要被操作的索引数组\n   * @param operation : (currentValue,currentIndex,currentArray)=>Void     执行的操作\n   * @param thisValue ? : any   可选，默认值是被操作的数组，即调用者；操作 operation 的 this 值\n   * @returns [Item]   被操作的元素列表\n   *\n   *\n   * operation(currentValue,currentIndex,currentArray)=>Void\n   * @param currentValue : any   调用 operation 时的元素的值；\n   * @param currentIndex : number     调用 operation 时 currentValue 对应的最新状态的索引值；\n   * @param currentArray : Array   调用 operation 时 被操作时最新状态的数组；\n   *\n   */\n  safelyOperateIndexs: {\n    enumerable: false,\n    value: function (indexList, operation, thisValue) {\n\n      if (thisValue == undefined) {\n        thisValue = this;\n      }\n\n      let itemList = this.filter(function (currentValue, index) {\n        return indexList.includes(index);\n      });\n\n\n      itemList.forEach((currentValue) => {\n        let currentIndex = this.indexOf(currentValue);\n        operation.call(thisValue, currentValue, currentIndex, this);\n      });\n\n      return itemList;\n\n    }\n\n  },\n\n\n  /**\n   * safelyOperateItems(itemList, operation, thisValue)\n   * 安全操作指定的元素\n   * @param itemList : [Item]   需要被操作的元素的数组\n   * @param operation : (currentValue,currentIndex,currentArray)=>Void     执行的操作\n   * @param thisValue ? : any   可选，默认值是被操作的数组，即调用者；操作 operation 的 this 值\n   * @returns [Index]   被操作的元素的索引的列表；\n   *\n   *\n   * operation(currentValue,currentIndex,currentArray)=>Void\n   * @param currentValue : any   调用 operation 时的元素的值；\n   * @param currentIndex : number     调用 operation 时 currentValue 对应的最新状态的索引值；\n   * @param currentArray : Array   调用 operation 时 被操作时最新状态的数组；\n   *\n   */\n  safelyOperateItems: {\n    enumerable: false,\n    value: function (itemList, operation, thisValue) {\n\n      if (thisValue == undefined) {\n        thisValue = this;\n      }\n\n\n      let itemListCopy = [];\n      let indexList = itemList.map((item) => {\n        itemListCopy.push(item);\n        return this.indexOf(item);\n      });\n\n      itemListCopy.forEach((currentValue) => {\n        let currentIndex = this.indexOf(currentValue);\n        operation.call(thisValue, currentValue, currentIndex, this);\n      });\n\n      return indexList;\n\n    }\n\n  },\n\n\n\n\n\n  /**\n   * safelyFilter(operation, thisValue)\n   * 安全地操作并过滤所有元素；与 forEach 和 filter 的区别是： safelyFilter 能保证会遍历数组中所有已存在的元素，不会受 operation 中的行为的影响；\n   * @param operation : (currentValue,currentIndex,currentArray)=>boolean | undefined     执行的操作， 该函数的返回值表示是否要过滤出该元素\n   * @param thisValue ? : any   可选，默认值是被操作的数组，即调用者；操作 operation 的 this 值\n   * @returns [Item]  返回被 operation 过滤出的元素\n   *\n   *\n   * operation(currentValue,currentIndex,currentArray)=>boolean | undefined\n   * @param currentValue : any   调用 operation 时的元素的值；\n   * @param currentIndex : number     调用 operation 时 currentValue 对应的最新状态的索引值；\n   * @param currentArray : Array   调用 operation 时 被操作时最新状态的数组；\n   * @returns boolean | undefined  表示是否要过滤出 currentValue ；\n   *\n   */\n  safelyFilter: {\n    enumerable: false,\n    value: function (operation, thisValue) {\n\n      if (thisValue == undefined) {\n        thisValue = this;\n      }\n\n      let arrayCopy = this.slice();\n\n      return arrayCopy.filter((currentValue) => {\n        let currentIndex = this.indexOf(currentValue);\n        operation.call(thisValue, currentValue, currentIndex, this);\n      });\n\n    }\n\n  },\n\n\n  //安全操作：结束\n\n\n\n\n\n\n\n\n\n\n\n  //移动元素：开始\n\n\n  /**\n   * move(fromIndex, toIndex, length = 1)\n   * 根据索引移动数组的元素\n   * @param fromIndex : number   被移动的元素的开始索引\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param length ? : number   可选，默认值：1 ； 被移动的元素的长度；\n   * @returns Array   被移动的元素的数组\n   */\n  move: {\n    enumerable: false,\n    value: function (fromIndex, toIndex, length = 1) {\n      let moveEleArr = this.splice(fromIndex, length);\n      this.splice(toIndex, 0, ...moveEleArr);\n\n      return moveEleArr;\n    }\n\n  },\n\n\n  /**\n   * moveTo(toIndex, ...fromIndexs)\n   * 根据索引批量移动数组的元素\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param fromIndex : number   被移动的元素的索引\n   * @returns Array<Item>   被移动的元素的数组\n   */\n  moveTo: {\n    enumerable: false,\n    value: function (toIndex, ...fromIndexs) {\n\n      let moveItems = this.deleteIndexs(...fromIndexs);\n      this.splice(toIndex, 0, ...moveItems);\n\n      return moveItems;\n    }\n\n  },\n\n\n  /**\n   * moveItemsTo(toIndex, ...items)\n   * 批量移动数组的指定元素\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param item : any   被移动的元素\n   * @returns Array<number>   被移动的元素的索引的数组\n   */\n  moveItemsTo: {\n    enumerable: false,\n    value: function (toIndex, ...items) {\n\n      let indexArr = this.deleteItems(...items);\n      this.splice(toIndex, 0, ...items);\n      return indexArr;\n    }\n\n  },\n\n\n  /**\n   * moveToUseTest(toIndex, needMoveTest)\n   * 根据测试函数批量移动数组的元素\n   * @param toIndex : number    元素被移动到的新位置的索引\n   * @param needMoveTest : (currentValue,index,arr)=>boolean    测试数组元素是否需要被移动的函数，返回 boolean 值，表示当前元素 currentValue 是否需要被移动；\n   * @returns Array<Item>   被移动的元素的数组\n   */\n  moveToUseTest: {\n    enumerable: false,\n    value: function (toIndex, needMoveTest,thisValue) {\n\n      let moveItems = this.deleteUseTest(needMoveTest,thisValue);\n      this.splice(toIndex, 0, ...moveItems);\n\n      return moveItems;\n    }\n\n  },\n\n\n  //移动元素：结束\n\n\n\n\n\n\n\n\n\n\n  //插入元素：开始\n\n\n  /**\n   * insertItem(item, toIndex = 0, equalTest)\n   * 将指定元素插入到调用者数组中指定索引处，并且会删除调用者数组中与 item 相同的元素\n   * @param item : any    被插入的元素\n   * @param toIndex : number    元素被插入到的位置的索引\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array<Item>   被删除的元素\n   */\n  insertItem: {\n    enumerable: false,\n    value: function (item, toIndex = 0, equalTest) {\n\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n\n      let deleItems = this.filter((currentValue, currentIndex, arr) => {\n        return equalTest.call(this, currentValue, item);\n      });\n\n\n      this.deleteItems(...deleItems);\n      this.splice(toIndex, 0, item);\n\n      return deleItems;\n\n    }\n\n  },\n\n\n  /**\n   * insertItemList(itemList, toIndex = 0, equalTest)\n   * 将指定数组itemList中的元素插入到调用者数组的指定索引处，并且会删除调用者数组中 与 itemList中元素 相同的元素\n   * @param itemList : [any]    被插入的元素数组\n   * @param toIndex ? : number    可靠；默认值：0 ； 元素被插入到的位置的索引；\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array<Item>   被删除的元素\n   */\n  insertItemList: {\n    enumerable: false,\n    value: function (itemList, toIndex, equalTest) {\n      return itemList.reduceRight((deleItemList, item) => {\n        let deleItems = this.insertItem(item, toIndex, equalTest);\n        deleItemList.unshift(...deleItems);\n        return deleItemList;\n      }, []);\n    }\n\n  },\n\n  //插入元素：结束\n\n\n\n\n\n\n\n\n\n  //删除元素：开始\n\n  /**\n   * delete(start, end)\n   * 根据索引删除数组的元素\n   * @param start : number   被删除的元素的开始索引\n   * @param end ? : number   可选，默认值：start ； 被删除的元素的结束索引；\n   * @returns Array   被删除的元素的数组\n   */\n  delete: {\n    enumerable: false,\n    value: function (start, end) {\n      if (end == null) {\n        end = start;\n      }\n      let length = end + 1 - start;\n      return this.splice(start, length);\n    }\n\n  },\n\n\n  /**\n   * deleteIndexs(...indexs)\n   * 删除数组中指定的元素\n   * @param index : number   被删除的元素的索引\n   * @returns Array<Item>   被删除的元素的数组\n   */\n  deleteIndexs: {\n    enumerable: false,\n    value: function (...indexs) {\n\n      return this.safelyOperateIndexs(indexs, function (currentValue, currentIndex, currentArray) {\n        currentArray.splice(currentIndex, 1);\n      }, this);\n\n    }\n\n  },\n\n\n  /**\n   * deleteItems(...items)\n   * 删除数组中指定的元素\n   * @param item : any   被删除的元素\n   * @returns Array<number>   被删除的元素的索引数组\n   */\n  deleteItems: {\n    enumerable: false,\n    value: function (...items) {\n\n      return this.safelyOperateItems(items, function (currentValue, currentIndex, currentArray) {\n        currentArray.splice(currentIndex, 1);\n      }, this);\n\n    }\n\n  },\n\n\n  /**\n   * deleteUseTest(needDeleteTest)\n   * 根据测试函数批量删除数组的元素\n   * @param needDeleteTest : (currentValue,index,arr)=>boolean    测试数组元素是否需要被删除的函数，返回 boolean 值，表示当前元素 currentValue 是否需要被删除；\n   * @returns Array<Item>   被删除的元素的数组\n   */\n  deleteUseTest: {\n    enumerable: false,\n    value: function (needDeleteTest,thisValue) {\n\n      if (thisValue === undefined){\n        thisValue = this;\n      }\n\n      let itemList = this.filter((currentValue, currentIndex, arr) => {\n        return needDeleteTest.call(thisValue, currentValue, currentIndex, arr);\n      });\n\n\n      this.safelyOperateItems(itemList, function (currentValue, currentIndex, currentArray) {\n        currentArray.splice(currentIndex, 1);\n      }, this);\n\n\n      return itemList;\n    }\n\n  },\n\n\n  //删除元素：结束\n\n\n\n\n\n\n  //查找元素：开始\n\n  /**\n   * filterIndexs(filterTest,thisArg)\n   * 该方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素的索引。\n   * @param filterTest : (currentValue,index,arr)=>boolean    用来测试数组的每个元素的函数。调用时使用参数 (currentValue,index,arr)。返回true表示保留该元素（通过测试），false则不保留\n   * @param thisArg ? : any 可选。执行 callback 时的用于 this 的值。\n   * @returns Array<Index>   通过测试的元素的索引\n   */\n  filterIndexs: {\n    enumerable: false,\n    value: function (filterTest,thisArg) {\n\n      if  (thisArg == undefined){\n        thisArg = this;\n      }\n\n      return this.reduce(function(indexList, currentValue, index,arr){\n        if (filterTest.call(thisArg,currentValue,index,arr)) {\n          indexList.push(index);\n        }\n        return indexList;\n      },[]);\n\n    }\n\n  },\n\n\n  /**\n   * 属性; 返回最后一个元素\n   */\n  lastItem: {\n    enumerable: false,\n    get: function () {\n      return this[this.length - 1];\n    }\n  },\n  //查找元素：结束\n\n\n\n  //集合运算：开始\n\n  /**\n   * isContains(arr,equalTest)\n   * 判断当前数组 是否包含 数组arr 的所有元素；\n   * @param arr : Array   被测试的数组\n   * @param equalTest ? : (thisEle,arrEle)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素thisEle 和 元素arrEle  相同；\n   * @returns boolean\n   */\n  isContains: {\n    enumerable: false,\n    value: function (arr,equalTest) {\n\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      return arr.every(function(item){\n\n        return this.some(function(thisItem){\n          return equalTest.call(this, thisItem, item);\n        },this);\n\n      }, this);\n\n    }\n  },\n\n\n\n  /**\n   * getIntersection(arr,equalTest)\n   * 获取指定数组的交集\n   * @param arr  : Array   数组\n   * @param equalTest ? : (thisEle,arrEle)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素thisEle 和 元素arrEle  相同；\n   * @returns Array   所有指定数组的交集\n   */\n  getIntersection: {\n    enumerable: false,\n    value: function (arr,equalTest) {\n\n      if (!equalTest){\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      return this.filter(function(thisEle){\n        return arr.some(function(arrEle){\n          return equalTest(thisEle,arrEle);\n        });\n      });\n\n    }\n  },\n\n\n\n  /**\n   * isIntersect(arr,equalTest)\n   * 判断当前数组与指定数组是否相交\n   * @param arr ? : Array   数组\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns boolean   当前数组与指定数组是否相交\n   */\n  isIntersect: {\n    enumerable: false,\n    value: function (arr,equalTest) {\n\n      if (!equalTest){\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n      return this.some(function(thisEle){\n        return arr.some(function(arrEle){\n          return equalTest(thisEle,arrEle);\n        });\n      });\n\n    }\n  },\n\n\n\n\n\n  /**\n   * 获取当前数组在指定数组上的补集\n   * @param universalArr ? : Array   全集数组\n   * @param equalTest ? : (arrItem,thisItem)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array   当前数组在指定数组上的补集\n   */\n  getComplementOn: {\n    enumerable: false,\n    value: function (universalArr,equalTest) {\n      if (!equalTest) {\n        equalTest = function (a, b) {\n          return a === b;\n        };\n      }\n\n\n\n\n      return universalArr.filter(function(arrItem){\n\n        return !this.some(function(thisItem){\n          return equalTest.call(this,arrItem,thisItem);\n        },this);\n\n      },this);\n    }\n  },\n\n\n\n\n  /**\n   * 获取符合 包含 和 排除 项 的所有元素\n   * getIncludeAndExclude(options,equalTest)\n   * @param options : {include ?: Array,exclude ?: Array}    必须；配置 包含 和 排除 数组 的 选项；\n   * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n   * @returns Array   返回符合 options 中设置的 包含 和 排除 项 的所有元素\n   */\n  getIncludeAndExclude: {\n    enumerable: false,\n    value: function (options,equalTest) {\n      var {include,exclude} = options;\n      var valids = this;\n      if (include){\n        valids = valids.getIntersection(include,equalTest);\n      }\n\n      if (exclude){\n        valids = exclude.getComplementOn(valids,equalTest);\n      }\n\n      return valids;\n    }\n  },\n\n\n  //集合运算：结束\n\n\n  //处理索引：开始\n\n  /**\n   * 获取指定索引的反相索引，即从后往前的索引，从0开始\n   * @param index : number   正向的索引\n   */\n  reverseIndexForIndex: {\n    enumerable: false,\n    value: function (index) {\n      return this.length - index - 1;\n    }\n  },\n\n  //处理索引：结束\n\n\n\n\n\n\n\n\n\n  //队列：开始\n\n  /**\n   * queuePush(item1, item2, ..., itemX)\n   * 从队列尾部推入所有的item；此操作会从数组开始删除相应的数目的元素\n   * @param item : any    推入队列的元素\n   * @returns Array    返回包含所有删除元素的数组\n   */\n  queuePush: {\n    enumerable: false,\n    value: function (...items) {\n      this.push(...items);\n      return this.splice(0,items.length);\n    }\n  },\n\n\n\n  /**\n   * queuePop()\n   * 从队列尾部推出（删除）一个item；此操作会将数组剩下的元素往数组尾部移动一位；\n   * @returns any    返回被删除的元素\n   */\n  queuePop: {\n    enumerable: false,\n    value: function () {\n      this.unshift(undefined);\n      return this.pop();\n    }\n  },\n\n\n\n\n  /**\n   * queueUnshift(item1, item2, ..., itemX)\n   * 从队列头部推入所有的item；此操作会从数组尾部删除相应的数目的元素\n   * @param item : any    推入队列的元素\n   * @returns Array    返回包含所有删除元素的数组\n   */\n  queueUnshift: {\n    enumerable: false,\n    value: function (...items) {\n      this.unshift(...items);\n      let len = items.length;\n      return this.splice(-len,len);\n    }\n  },\n\n\n\n\n  /**\n   * queueShift()\n   * 从队列头部推出（删除）一个item；此操作会将数组剩下的元素往数组头部移动一位；\n   * @returns any    返回被删除的元素\n   */\n  queueShift: {\n    enumerable: false,\n    value: function () {\n      this.push(undefined);\n      return this.shift();\n    }\n  },\n\n  //队列：结果\n\n\n\n\n};\n\n\nObject.defineProperties(Array.prototype, propertyDescriptors);\n\n\n\n\n\n\n//集合运算：开始\n\n/**\n * 获取所有指定数组的交集\n * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n * @param array ? : Array   数组\n * @returns Array   所有指定数组的交集\n */\nArray.intersectionOf = function intersectionOf(equalTest,...arrays) {\n\n  if (typeof equalTest != \"function\"){\n\n    if (Array.isArray(equalTest)) {\n      arrays.unshift(equalTest);\n    }\n\n    equalTest = function (a, b) {\n      return a === b;\n    };\n\n  }\n\n\n\n  arrays.sort(function(arr1,arr2){\n    return arr1.length - arr2.length ;\n  });\n\n  let leastArr = arrays.shift();\n\n\n\n  return leastArr.filter(function(item){\n\n    return arrays.every(function(arr){\n\n      return arr.some(function(arrItem){\n        return equalTest(item,arrItem);\n      });\n\n    });\n\n  });\n}\n\n\n\n\n\n\n/**\n * 判断所有指定数组是否有交集\n * @param equalTest ? : (a,b)=>boolean    可选， 默认是通过全等 === 来判断元素是否相等的；测试数组元素是否相同的函数，返回 boolean 值，表示 元素a 和 元素b  相同；\n * @param array ? : Array   数组\n * @returns boolean   所有指定数组是否有交集\n */\nArray.isIntersect = function isIntersect(equalTest,...arrays) {\n\n  if (typeof equalTest != \"function\"){\n\n    if (Array.isArray(equalTest)) {\n      arrays.unshift(equalTest);\n    }\n\n    equalTest = function (a, b) {\n      return a === b;\n    };\n\n  }\n\n\n\n  arrays.sort(function(arr1,arr2){\n    return arr1.length - arr2.length ;\n  });\n\n  let leastArr = arrays.shift();\n\n\n\n\n  return leastArr.some(function(item){\n\n    return arrays.every(function(arr){\n\n      return arr.some(function(arrItem){\n        return equalTest(item,arrItem);\n      });\n\n    });\n\n  });\n};\n\n\n\n\n\n//集合运算：结束\n\n\n\n\n\n\n\n\n\n\n/**\n * isArrayLike(target)\n * 判断 target 是否为 类数组对象\n * @param target : any    目标\n * @returns boolean\n */\nArray.isArrayLike = function isArrayLike(target) {\n  let length = target && target.length;\n  return Number.isInteger(target.length) && length >= 0;\n};\n","\n//对 JSON 扩展的属性和方法都写在 extendJSON 里面\nvar extendJSON = {\n  extended:true,  //用于标识 JSON 是否这被对象 extendJSON 扩展过；\n\n\n  /**\n   * 安全地解析字符串，不会抛出错误，返回一个解析结果的信息对象\n   * @param text : string   必需， 一个有效的 JSON 字符串。\n   * @param reviver ?: function   可选，一个转换结果的函数， 将为对象的每个成员调用此函数。\n   * @returns {parsed: boolean, result: string | JSONObject }   解析的结果； parsed ：表示是否成功解析； result ： 最终解析的结果，如果成功解析，则该值为解析后的JSON对象，如果未成功解析，则该值为原字符串 text\n   */\n  safelyParse: function (text, reviver) {\n    let parseInfo = {\n      parsed: true,\n      result: text\n    };\n\n    try {\n      parseInfo.result = JSON.parse(text, reviver);\n    } catch (e) {\n      parseInfo.parsed = false;\n    }\n\n    return parseInfo;\n  },\n\n\n  /**\n   * 将目标深度序列化成JSON字符串\n   * @param target : any    将要序列化成 一个JSON 字符串的值。\n   * @param replacer ? : (key,vlaue)=>vlaue |  Array    如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。\n   * @param space ?  指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。\n   * @returns string   一个表示给定值的JSON字符串。\n   *\n   *\n   *\n   * 注意：\n   * 该方法会把 target 的中的所有对象属性单独序列化成 JSON 字符串\n   */\n  depthStringify:function(target, replacer , space){\n    let newTarget = Object.keys(target).reduce((total,key)=>{\n      let prop = target[key];\n      if (typeof prop == \"object\"){\n        prop = this.depthStringify(prop,replacer , space);\n      }\n      total[key] = prop;\n      return total;\n    },{});\n\n    return JSON.stringify(newTarget,replacer , space)\n  },\n\n\n  /**\n   * 深度解析； depthStringify 的逆运算\n   * @param text\n   * @param reviver\n   * @returns any\n   */\n  depthParse:function(text, reviver){\n    let result = JSON.correctParse(text, reviver);\n    if (typeof result == \"object\"){\n      Object.keys(result).forEach((key)=> {\n        let prop = result[key];\n        prop = this.depthParse(prop,reviver);\n        result[key] = prop;\n      });\n    }\n\n    return result;\n  },\n\n\n  /**\n   * 判断 text 是否是有效的JSON字符串\n   * @returns boolean\n   */\n  isJSONString:function (text) {\n\n    try {\n      var parsed = JSON.parse(text);\n      var isJSON = parsed !== text;\n    } catch (e) {\n      isJSON = false;\n    }\n\n    return isJSON;\n\n  },\n\n\n  /**\n   * correctParse(text,reviver)\n   * 正确地解析，即：如果 text 是有效的 JSON 字符串，则解析它并返回解析后的结果，否则，返回原来的text\n   * @param text :  string   被解析的字符串\n   * @returns any\n   */\n  correctParse:function (text,reviver) {\n\n    try {\n      var parsed = JSON.parse(text, reviver);\n      var isJSON = parsed !== text;\n    } catch (e) {\n      isJSON = false;\n    }\n\n    if (!isJSON){\n      parsed = text;\n    }\n\n    return parsed;\n\n  }\n\n\n\n\n\n};\n\n\n\n\n\n\n\nvar oriJSON = globalThis.JSON ;\n\n/*\n* 翻用这种方式的原因是：\n* 为了防止别人重置 JSON 对象时忽略了本文件扩展的方法；\n* */\nObject.defineProperty(globalThis, \"JSON\", {\n  get: function () {\n    return globalThis._JSON;\n  },\n\n  set: function (newValue) {\n    if (!newValue.extended) {\n      Object.assign(newValue,extendJSON);\n    }\n    globalThis._JSON = newValue;\n  }\n});\n\nglobalThis.JSON = oriJSON ;\n","\n\nObject.defineProperties(String.prototype,{\n\n  /**\n   * 是否是有效的 JSON 字符串\n   */\n  isJSONString:{\n    get: function () {\n      return JSON.isJSONString(this);\n    }\n  },\n\n\n  /**\n   * 是否不包任何非空字符\n   */\n  noChars:{\n    get: function () {\n      return !(/\\S+/.test(this));\n    }\n  },\n\n\n  /**\n   * 首字母大写\n   */\n  capFirstLetter:{\n    get:function () {\n      return this.replace(/(^\\W*)(\\w)/,function (match,p1,p2) {\n        return p1 + p2.toUpperCase();\n      });\n    }\n  },\n\n\n\n  /**\n   * 把字符串转换成分隔线的格式\n   * @param separator ? : string   可选，默认值：\"-\" ；   分隔线\n   * @property caseType ? : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常，不做改变；\n   * @returns string\n   */\n  toSeparatorLineFormat:{\n    value:function (separator,caseType) {\n\n      if (separator == undefined)  {\n        separator = \"-\" ;\n      }\n\n      if (caseType == undefined) {\n        caseType = \"N\" ;\n      }\n\n      var lowerCase = caseType == \"L\" ;\n\n      var targetStr = this.replace(/[A-Z]+/g,function (match,offset,oriStr) {\n        var matchStr = lowerCase ? match.toLowerCase() : match ;\n        return separator + matchStr ;\n      });\n\n      var errorSeparatorRexStr = \"(^\\\\s*)\"+ separator + \"+\" ;\n      var errorSeparatorRex = new RegExp(errorSeparatorRexStr);\n      targetStr = targetStr.replace(errorSeparatorRex,\"$1\");  //如果首字母是大写，执行replace时会多一个_，这里需要去掉\n\n      if (caseType == \"U\"){\n        targetStr = targetStr.capFirstLetter\n      }\n\n      return targetStr;\n    }\n  },\n\n\n\n  /**\n   * 把字符串从分隔线格式转换成驼峰格式\n   * @param separator ? : string   可选，默认值：\"-\" ；   分隔线\n   * @returns string\n   */\n  toCamelFormat:{\n    value:function (separator) {\n\n      if (separator == undefined)  {\n        separator = \"-\" ;\n      }\n\n      var separatorRexStr = separator + \"+([A-Za-z]?)\" ;\n      var separatorRex = new RegExp(separatorRexStr,\"g\");\n\n      return this.replace(separatorRex,function (match,p1) {\n        return p1.toUpperCase() ;\n      });\n    }\n  },\n\n\n\n\n  /**\n   * 获取所有指定格式的字符串\n   * @param formats : [FormatObject]  | FormatObject   格式对象 或者 数组\n   * FormatObject := {separator : string, caseType : L | U | N}\n   * @property separator  : string     分隔符\n   * @property caseType  : L | U | N     大小写类型；   L : 小写，当没有设置 separator 时，将会把所有字符都转为小写 ； U : 大写 ，当没有设置 separator 时，将会把所有字符都转为大写； N : 正常\n   * @returns [string]  所有指定格式的字符串数组\n   */\n  getAllStrForFormats:{\n    value:function (formats) {\n      var _this = this;\n\n      if (!Array.isArray(formats)) {\n        formats = [formats];\n      }\n\n      var allStrs = formats.reduce(function(total,format) {\n        var separator = format.separator ;\n        var caseType = format.caseType || \"N\" ;\n\n\n        var targetStr = _this;\n\n        if (separator != undefined) {\n          targetStr = _this.toSeparatorLineFormat(separator,caseType);\n        }else if (caseType == \"U\") {\n          targetStr = _this.toUpperCase();\n        }else if (caseType == \"L\") {\n          targetStr = _this.toLowerCase();\n        }\n\n        total.push(targetStr);\n\n        return total;\n\n      },[]);\n\n      return allStrs;\n    }\n  },\n\n\n\n\n  //URL相关：开始\n\n  /**\n   * 是否是URL\n   */\n  isURL:{\n    get: function () {\n      return /^\\w+:\\/\\/\\S+/.test(this);\n    }\n  },\n\n\n  //URL相关：结束\n\n\n\n\n});\n","/**\n * 接口1:\n * distanceSort(target, num1,num2 ,...)\n * 根据各个 num 在数轴上距 target 远近来排序\n * @param target : number  目标，参考数\n * @param num : number    参与比较的数\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n *\n *\n * 接口2:\n * distanceSort(target, nums)\n * 根据 nums 各个数在数轴上距 target 远近来排序\n * @param target : number  目标，参考数\n * @param nums : [number]    参考比较的数的数组\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n */\nMath.distanceSort = function distanceSort(target, ...nums) {\n  let numList = nums;\n\n  let firstNum = nums[0];\n  if ( (nums.length == 1) && Array.isArray(firstNum)) {\n    numList = firstNum.slice();\n  }\n\n  let disSort = numList.sort(function (a,b) {\n    return Math.abs(a - target) - Math.abs(b - target) ;\n  });\n\n  return disSort;\n};\n\n\n\n\n\n\n/**\n * 接口1:\n * nearest(target, num1,num2 ,...)\n * 返回距 target 最近的数\n * @param target : number  目标，参考数\n * @param num : number    参与比较的数\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n *\n *\n * 接口2:\n * nearest(target, nums)\n * 返回距 target 最近的数\n * @param target : number  目标，参考数\n * @param nums : [number]    参考比较的数的数组\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n */\nMath.nearest = function nearest(target, ...nums) {\n  let disSort = Math.distanceSort(target,...nums);\n  return disSort[0];\n};\n\n\n\n\n/**\n * 接口1:\n * farthest(target, num1,num2 ,...)\n * 返回距 target 最远的数\n * @param target : number  目标，参考数\n * @param num : number    参与比较的数\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n *\n *\n * 接口2:\n * farthest(target, nums)\n * 返回距 target 最远的数\n * @param target : number  目标，参考数\n * @param nums : [number]    参考比较的数的数组\n * @returns [number]   返回 按距离 target 从近到远排列的数的数组\n */\nMath.farthest = function farthest(target, ...nums) {\n  let disSort = Math.distanceSort(target,...nums);\n  let lastIndex = disSort.length - 1;\n  return disSort[lastIndex];\n};\n","\nlet propertyDescriptors = {\n\n\n\n  /**\n   * 接口1:\n   * distanceSort(num1,num2 ,...)\n   * 根据各个 num 在数轴上距 自己 远近来排序\n   * @param num : number    参与比较的数\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   *\n   *\n   * 接口2:\n   * distanceSort(nums)\n   * 根据 nums 各个数在数轴上距 自己 远近来排序\n   * @param nums : [number]    参考比较的数的数组\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   */\n  distanceSort:{\n    enumerable:false,\n    value:function(...nums){\n      return Math.distanceSort(this,...nums);\n    }\n  },\n\n\n\n  /**\n   * 接口1:\n   * nearest(num1,num2 ,...)\n   * 返回距 自己 最近的数\n   * @param num : number    参与比较的数\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   *\n   *\n   * 接口2:\n   * nearest(nums)\n   * 返回距 自己 最近的数\n   * @param nums : [number]    参考比较的数的数组\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   */\n  nearest:{\n    enumerable:false,\n    value:function(...nums){\n      return Math.nearest(this,...nums);\n    }\n  },\n\n\n\n\n  /**\n   * 接口1:\n   * farthest(num1,num2 ,...)\n   * 返回距 自己 最远的数\n   * @param num : number    参与比较的数\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   *\n   *\n   * 接口2:\n   * farthest(nums)\n   * 返回距 自己 最远的数\n   * @param nums : [number]    参考比较的数的数组\n   * @returns [number]   返回 按距离 自己 从近到远排列的数的数组\n   */\n  farthest:{\n    enumerable:false,\n    value:function(...nums){\n      return Math.farthest(this,...nums);\n    }\n  },\n\n\n\n};\n\n\n\n\n\n\nObject.defineProperties(Number.prototype,propertyDescriptors);\n\n\n\n\n\n\n\n//兼容：开始\n\n\nif (!Number.isInteger) {\n  Number.isInteger = Number.isInteger || function(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n  };\n}\n\n\n//兼容：结束\n","/**\n *\n * 接口1\n * getDaysOfMonth(timestamp)\n * 获取指定时间所在月份的总天数\n * @param timestamp : number  代表自1970年1月1日00:00:00 (世界标准时间) 起经过的毫秒数。\n * @returns number   返回指定月份的天数\n *\n *\n *\n * 接口2\n * getDaysOfMonth(dateString)\n * 获取指定时间所在月份的总天数\n * @param dateString : string  日期的字符串值。该字符串应该能被 Date.parse() 方法识别\n * @returns number   返回指定月份的天数\n *\n *\n *\n * 接口3\n * getDaysOfMonth(date)\n * 获取指定时间实例所在月份的总天数\n * @param date : Date  Date 实例。\n * @returns number   返回指定月份的天数\n *\n *\n * 接口4\n * getDaysOfMonth(year, month)\n * 获取指定月份的总开数\n * @param year : number  年份\n * @param month : number  月份\n * @returns number   返回指定月份的天数\n *\n *\n * 接口5\n * getDaysOfMonth()\n * 获取当前时间实例所在月份的总天数\n * @returns number   返回当前时间所在月份的总天数\n */\nDate.getDayNumberOfMonth = function getDayNumberOfMonth(year, month) {\n\n  switch (arguments.length) {\n    case 2:{\n      var date = new Date(year,month);\n      break;\n    }\n\n    case 1:{\n      var initValue = year;\n      if (year instanceof Date){\n        initValue = year.getTime();\n      }\n      date = new Date(initValue);\n      break;\n    }\n\n    default:{\n      date = new Date();\n    }\n\n  }\n\n\n  date.setMonthOffset(1);\n  date.setDate(0);\n  var dayNum = date.getDate();\n  return dayNum;\n};\n\n\n/**\n * 获取该日期所在月份的天数\n */\nDate.prototype.getDayNumber = function getDayNumber() {\n  return Date.getDayNumberOfMonth(this);\n};\n\n\n\n\n\n/**\n * setYearOffset(offset)\n * 设置年份偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的年份\n */\nDate.prototype.setYearOffset = function setYearOffset(offset) {\n  if (offset) {\n    var num = this.getFullYear();\n    this.setFullYear(num+offset);\n  }\n\n  return this.getFullYear();\n};\n\n\n\n/**\n * setMonthOffset(offset)\n * 设置月份偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的月份\n */\nDate.prototype.setMonthOffset = function setMonthOffset(offset) {\n  if (offset) {\n    var num = this.getMonth();\n    this.setMonth(num+offset);\n  }\n\n  return this.getMonth();\n};\n\n\n\n\n\n/**\n * setDateOffset(offset)\n * 设置天偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的天\n */\nDate.prototype.setDateOffset = function setDateOffset(offset) {\n  if (offset) {\n    var num = this.getDate();\n    this.setDate(num+offset);\n  }\n\n  return this.getDate();\n};\n\n\n\n/**\n * setHourOffset(offset)\n * 设置小时偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns date : number   偏移后的小时\n */\nDate.prototype.setHourOffset = function setHourOffset(offset) {\n  if (offset) {\n    var num = this.getHours();\n    this.setHours(num+offset);\n  }\n\n  return this.getHours();\n};\n\n\n\n\n\n\n/**\n * setMinuteOffset(offset)\n * 设置分钟偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的分钟\n */\nDate.prototype.setMinuteOffset = function setMinuteOffset(offset) {\n  if (offset) {\n    var num = this.getMinutes();\n    this.setMinutes(num+offset);\n  }\n\n  return this.getMinutes();\n};\n\n\n\n\n\n\n\n/**\n * setSecondOffset(offset)\n * 设置秒数偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的秒数\n */\nDate.prototype.setSecondOffset = function setSecondOffset(offset) {\n  if (offset) {\n    var num = this.getSeconds();\n    this.setMinutes(num+offset);\n  }\n\n  return this.getSeconds();\n};\n\n\n\n\n\n/**\n * setMillisecondOffset(offset)\n * 设置亳秒数偏移量 正数：向未来偏移，负数，表示向过去偏移\n * @param offset : number   偏移量，正数：向未来偏移，负数，表示向过去偏移\n * @returns number   偏移后的亳秒数\n */\nDate.prototype.setMillisecondOffset = function setMillisecondOffset(offset) {\n  if (offset) {\n    var num = this.getMilliseconds();\n    this.setMilliseconds(num+offset);\n  }\n\n  return this.getMilliseconds();\n};\n\n\n\n\n\n\n//获取从开始到结束的步长为step的所有时间\n\n/*Date.getAllDate  = function(start,step,end) {\n\n  switch (step) {\n    case\n\n  }\n\n\n};*/\n","import \"./Element\"\r\nimport \"./EventTarget\"\r\nimport \"./FormData\"\r\nimport \"./Node\"","//元素位置距离：开始\n\n\n/**\n * 计算元素相对指定的祖先节点 parentNode 的偏移量\n * @param parentNode : Element  祖先节点\n * @return {x:number,y:number,left:number,top:number}   x、leftL: 水平方向的偏移量；y、top : 垂直方向的偏移量；\n */\nElement.prototype.scrollDistanceFromParent = function (parentNode) {\n  var top = this.scrollTop;\n  var left = this.scrollLeft;\n\n  var nextNode = this.parentNode;\n\n  while (!parentNode.isSameNode(nextNode)) {\n    top += nextNode.scrollTop;\n    left += nextNode.scrollLeft;\n    nextNode = nextNode.parentNode;\n  }\n\n  return {x: left,y: top, left: left, top: top };\n};\n\n\n\n\n\n\n/**\n * 计算元素相对文档的偏移量\n * @return {x:number,y:number,left:number,top:number}   x、leftL: 水平方向的偏移量；y、top : 垂直方向的偏移量；\n */\nElement.prototype.offsetFromDocument = function () {\n  var top = this.offsetTop;\n  var left = this.offsetLeft;\n\n  var nextNode = this.offsetParent;\n\n  while (nextNode) {\n    top += nextNode.offsetTop;\n    left += nextNode.offsetLeft;\n    nextNode = nextNode.offsetParent;\n  }\n\n  return {x: left,y: top, left: left, top: top };\n};\n\n\n\n\n\n\n/**\n * 计算指定元素相对于当前元素之间的可视的距离坐标\n * @param toDom : Element  指定元素\n * @return {x:number,y:number,left:number,top:number}  x、left: 水平方向的的距离；y、top : 垂直方向的距离；\n */\nElement.prototype.distanceToDom = function (toDom) {\n\n  var fromRect = this.getBoundingClientRect();\n  var toRect = toDom.getBoundingClientRect();\n\n  var x = toRect.left - fromRect.left;\n  var y = toRect.top - fromRect.top;\n\n  return {x: x,y: y,left: x,top: y};\n};\n\n\n//元素位置距离：结束\n\n\n\n\n\n\n\n\n\n//元素行字数：开始\n\nlet propertyDescriptors = {\n\n\n  /**\n   * isVertical : boolean  表示元素的内容是否是垂直方向排列\n   */\n  isVertical: {\n    enumerable:false,\n    get:function(){\n      var compStyle = globalThis.getComputedStyle(this);\n      var writingMode =  compStyle.writingMode;\n\n      var isVer = false;\n      switch (writingMode) {\n        case \"vertical-rl\":\n        case \"vertical-lr\":\n        case \"tb-rl\":{\n          isVer = true;\n          break;\n        }\n      }\n\n      return isVer;\n    }\n  },\n\n\n  /**\n   * computedLineHeight : number  返回元素的计算后的行高\n   */\n  computedLineHeight:{\n    enumerable:false,\n    get:function(){\n      var compStyle = globalThis.getComputedStyle(this);\n      var lineHeight =  parseFloat(compStyle.lineHeight);\n\n      if (isNaN(lineHeight)) {\n        var fontSize = parseFloat(compStyle.fontSize);\n        lineHeight = fontSize * 1.2 ;\n      }\n\n      return lineHeight;\n    }\n\n  },\n\n\n  /**\n   * contentHeight : number   元素内容区域的高度\n   */\n  contentHeight: {\n    enumerable: false,\n    get: function(){\n      var compStyle = globalThis.getComputedStyle(this);\n      var clientHeight = this.clientHeight;\n      var paddingTop =  parseFloat(compStyle.paddingTop);\n      var paddingBottom =  parseFloat(compStyle.paddingBottom);\n\n      return clientHeight - paddingTop - paddingBottom;\n    }\n\n  },\n\n  /**\n   * contentWidth : number   元素内容区域的宽度\n   */\n  contentWidth: {\n    enumerable: false,\n    get: function(){\n      var compStyle = globalThis.getComputedStyle(this);\n      var clientWidth = this.clientWidth;\n      var paddingLeft =  parseFloat(compStyle.paddingLeft);\n      var paddingRight =  parseFloat(compStyle.paddingRight);\n\n      return clientWidth - paddingLeft - paddingRight;\n    }\n\n  },\n\n\n\n  /**\n   * scrollContentHeight : number   元素的滑动内容区域的高度\n   */\n  scrollContentHeight: {\n    enumerable: false,\n    get: function(){\n      var compStyle = globalThis.getComputedStyle(this);\n      var scrollHeight = this.scrollHeight;\n      var paddingTop =  parseFloat(compStyle.paddingTop);\n      var paddingBottom =  parseFloat(compStyle.paddingBottom);\n\n      return scrollHeight - paddingTop - paddingBottom;\n    }\n\n  },\n\n\n\n  /**\n   * scrollContentWidth : number   元素的滑动内容区域的宽度\n   */\n  scrollContentWidth: {\n    enumerable: false,\n    get: function(){\n      var compStyle = globalThis.getComputedStyle(this);\n      var scrollWidth = this.scrollWidth;\n      var paddingTop =  parseFloat(compStyle.paddingTop);\n      var paddingBottom =  parseFloat(compStyle.paddingBottom);\n\n      return scrollWidth - paddingTop - paddingBottom;\n    }\n\n  },\n\n\n\n\n  /**\n   * numberOfLinesOnClient : number  返回能在元素的 client 中能显示文字的最大行数\n   */\n  numberOfLinesOnClient: {\n    enumerable: false,\n    get: function () {\n      var length = this.isVertical ? this.contentWidth : this.contentHeight ;\n      return length / (this.computedLineHeight);\n    }\n\n  },\n\n\n  /**\n   * numberOfCharsPerLineOnClient : number  返回能在元素的 client 中每行能显示文字的最大字数\n   */\n  numberOfCharsPerLineOnClient: {\n    enumerable: false,\n    get: function () {\n      var compStyle = globalThis.getComputedStyle(this);\n      var fontSize = parseFloat(compStyle.fontSize);\n\n      var length = this.isVertical ? this.contentHeight : this.contentWidth ;\n      return length / fontSize;\n    }\n\n  },\n\n\n\n  /**\n   * numberOfCharsOnClient : number  返回能在元素的 client 中能显示文字的最大字数\n   * 注意：\n   * 该值是 对 numberOfLinesOnClient 和 numberOfCharsPerLineOnClient 四舍五入后的乘积\n   */\n  numberOfCharsOnClient: {\n    enumerable: false,\n    get: function () {\n      var roundLineNum = Math.round(this.numberOfLinesOnClient);\n      var roundCharNum = Math.round(this.numberOfCharsPerLineOnClient);\n\n      return roundLineNum * roundCharNum;\n    }\n\n  },\n\n\n\n\n  /**\n   * numberOfLinesOnScroll : number  返回能在元素的 滑动区域 中能显示文字的最大行数\n   */\n  numberOfLinesOnScroll: {\n    enumerable: false,\n    get: function () {\n      var length = this.isVertical ? this.scrollContentWidth : this.scrollContentHeight ;\n      return length / (this.computedLineHeight);\n    }\n\n  },\n\n\n  /**\n   * numberOfCharsPerLineOnScroll : number  返回能在元素的  滑动区域 中每行能显示文字的最大字数\n   */\n  numberOfCharsPerLineOnScroll: {\n    enumerable: false,\n    get: function () {\n      var compStyle = globalThis.getComputedStyle(this);\n      var fontSize = parseFloat(compStyle.fontSize);\n      var length = this.isVertical ? this.scrollContentHeight : this.scrollContentWidth ;\n      return length / fontSize;\n    }\n\n  },\n\n\n\n\n  /**\n   * numberOfCharsOnClient : number  返回能在元素的 滑动区域 中能显示文字的最大字数\n   * 注意：\n   * 该值是 对 numberOfLinesOnScroll 和 numberOfCharsPerLineOnScroll 四舍五入后的乘积\n   */\n  numberOfCharsOnScroll: {\n    enumerable: false,\n    get: function () {\n      var roundLineNum = Math.round(this.numberOfLinesOnScroll);\n      var roundCharNum = Math.round(this.numberOfCharsPerLineOnScroll);\n\n      return roundLineNum * roundCharNum;\n    }\n\n  },\n\n};\n\n\n\nObject.defineProperties(Element.prototype,propertyDescriptors);\n\n\n\n\n\n\n\n/**\n * calcClientLengthOfLines(lineNumber)\n * 计算刚好容纳指定的 行数 时 元素的尺寸\n * @param lineNumber : number  行数\n */\nElement.prototype.calcClientLengthOfLines = function (lineNumber) {\n\n  var isVisible = this.isVisible ;\n  var length = 0;\n\n  if (lineNumber == undefined) {\n    return {length:length, visible:isVisible} ;\n  }\n\n\n\n  length = this.computedLineHeight * lineNumber;\n\n\n  var compStyle = globalThis.getComputedStyle(this);\n  var boxSizing = compStyle.boxSizing;\n  var isBorderBox = boxSizing == \"border-box\" ;\n\n\n  if (isBorderBox) {\n\n    if (isVisible) {\n      var paddingLeft = parseFloat(compStyle.paddingLeft);\n      var paddingRight = parseFloat(compStyle.paddingRight);\n      length = length + paddingLeft + paddingRight ;\n    }else {\n      var paddingTop = parseFloat(compStyle.paddingTop);\n      var paddingBottom = parseFloat(compStyle.paddingBottom);\n      length = length + paddingTop + paddingBottom ;\n    }\n\n  }\n\n  return {length:length, visible:isVisible} ;\n\n};\n\n\n\n\n\n\n\n/**\n * setNumberOfLines(lineNumber)\n * 给元素设置相应的尺寸以使能刚好容纳指定的 行数\n * @param lineNumber : number | undefined | null    行数 ; 当值为 undefined | null 时，清除之前关于行数的设置\n */\nElement.prototype.setNumberOfLines = function (lineNumber) {\n\n  var lengthInfo = this.calcClientLengthOfLines(lineNumber);\n  var isVisible = lengthInfo.visible ;\n  var lineLength = lengthInfo.length ;\n\n  if (lineNumber == undefined) { //如果没传任何值；则清除相关的内联样式\n\n    if (isVisible) {\n      this.style.width = null ;\n    }else {\n      this.style.height = null ;\n    }\n\n    return\n  }\n\n\n  var lengthStyle =  lineLength + \"px\" ;\n\n  if (isVisible) {\n    this.style.width = lengthStyle ;\n\n  }else {\n    this.style.height = lengthStyle ;\n  }\n\n\n};\n\n\n\n\n\n\n/**\n * setNumberOfChars(charNumber)\n * 给元素设置相应的尺寸以使每行能刚好容纳指定的 字数\n * @param charNumber : number | undefined | null    字数 ; 当值为 undefined | null 时，清除之前关于字数的设置\n */\nElement.prototype.setNumberOfChars = function (charNumber) {\n\n  var isVisible = this.isVisible ;\n\n  if (charNumber == undefined) { //如果没传任何值；则清除相关的内联样式\n\n    if (isVisible) {\n      this.style.height = null ;\n    }else {\n      this.style.width = null ;\n    }\n    return\n  }\n\n\n  var charLength = charNumber + \"em\";\n\n\n  var compStyle = globalThis.getComputedStyle(this);\n  var boxSizing = compStyle.boxSizing;\n  var isBorderBox = boxSizing == \"border-box\" ;\n\n\n\n  if (isVisible) {\n\n    if (isBorderBox) {\n\n      var paddingTop = compStyle.paddingTop;\n      var paddingBottom = compStyle.paddingBottom;\n\n      charLength = \"calc( \" + charLength + \" + \" + paddingTop + \" + \" + paddingBottom + \" )\" ;\n    }\n\n    this.style.height = charLength ;\n\n\n  }else {\n\n    if (isBorderBox) {\n\n      var paddingLeft = compStyle.paddingLeft;\n      var paddingRight = compStyle.paddingRight;\n\n      charLength = \"calc( \" + charLength + \" + \" + paddingLeft + \" + \" + paddingRight + \" )\" ;\n    }\n\n    this.style.width = charLength ;\n\n  }\n\n\n};\n\n\n\n\n\n\n\n\n/**\n * setNumberOfLinesAndChars(lineNumber,charNumber)\n * @param lineNumber : number | undefined | null    行数 ; 当值为 undefined | null 时，清除之前关于行数的设置\n * @param charNumber : number | undefined | null    字数 ; 当值为 undefined | null 时，清除之前关于字数的设置\n */\nElement.prototype.setNumberOfLinesAndChars = function (lineNumber,charNumber) {\n  this.setNumberOfLines(lineNumber);\n  this.setNumberOfChars(charNumber);\n};\n\n\n\n//元素行字数：结束\n\n\n","if (!globalThis.EventTarget) {\n  /*\n  * 目前发现在Ios8的浏览器中是没有 EventTarget 类型的，Node 类型直接继承 Object ；\n  * */\n  globalThis.EventTarget = Object;\n}\n\n\n/*\n* 使用属性描述来定义属性，为了解决给 Object.prototype 添加属性会在Vue中报错的问题，需要将属性设置为不可枚举的；\n* */\nlet propertyDescriptors = {\n  /**\n   * 兼容方法：为事件添加事件处理器\n   * @param event : string 必需。描述事件名称的字符串。注意： 不要使用 \"on\" 前缀。例如，使用 \"click\" 来取代 \"onclick\"。\n   * @param handler : function  必需。描述了事件触发后执行的函数。\n   * @param useCapture : boolean 可选。布尔值，指定事件是否 在捕获或冒泡阶段执行。\n   */\n  byAddEventListener: {\n    enumerable: false,\n    value: function (event, handler, useCapture) {\n      if (this.addEventListener) {\n        this.addEventListener(event, handler, useCapture);\n      } else if (this.attachEvent) {\n        this.attachEvent(\"on\" + event, handler);\n      } else {\n        this[\"on\" + event] = handler;\n      }\n    }\n  },\n\n  /**\n   * 兼容方法：移除事件处理器\n   * @param event : string 必须。要移除的事件名称。注意： 不要使用 \"on\" 前缀。例如，使用 \"click\" 来取代 \"onclick\"。\n   * @param handler : function  必须。指定要移除的函数。\n   * @param useCapture : boolean 可选。布尔值，指定移除事件句柄的阶段。\n   */\n  byRemoveEventListener: {\n    enumerable: false,\n    value: function (event, handler, useCapture) {\n      if (this.removeEventListener) {\n        this.removeEventListener(event, handler, useCapture);\n      } else if (this.attachEvent) {\n        this.detachEvent(\"on\" + event, handler);\n      } else {\n        this[\"on\" + event] = null;\n      }\n    }\n  },\n\n\n\n  /**\n   * 兼容方法：为多个事件添加事件处理器\n   * @param eventList : Array<string> 必需。事件名称数组。注意： 不要使用 \"on\" 前缀。例如，使用 \"click\" 来取代 \"onclick\"。\n   * @param handler : function  必需。描述了事件触发后执行的函数。\n   * @param useCapture : boolean 可选。布尔值，指定事件是否 在捕获或冒泡阶段执行。\n   */\n  byAddListenerForMultipleEvent: {\n    enumerable: false,\n    value: function (eventList, handler, useCapture) {\n      eventList.forEach((event)=>{\n        this.byAddEventListener(event,handler,useCapture);\n      });\n    }\n  },\n\n\n\n  /**\n   * 兼容方法：移除事件处理器\n   * @param eventList : Array<string> 必需。需要移除的事件名称数组。注意： 不要使用 \"on\" 前缀。例如，使用 \"click\" 来取代 \"onclick\"。\n   * @param handler : function  必须。指定要移除的函数。\n   * @param useCapture : boolean 可选。布尔值，指定移除事件句柄的阶段。\n   */\n  byRemoveListenerForMultipleEvent: {\n    enumerable: false,\n    value: function (eventList, handler, useCapture) {\n      eventList.forEach((event)=>{\n        this.byRemoveEventListener(event,handler,useCapture);\n      });\n    }\n  },\n\n\n\n\n\n  /**\n   * 兼容方法：为单个事件添加多个事件处理器\n   * @param event : string 必需。描述事件名称的字符串。注意： 不要使用 \"on\" 前缀。例如，使用 \"click\" 来取代 \"onclick\"。\n   * @param handlerList : Array<function>  必需。需要添加的事件处理器数组。\n   * @param useCapture : boolean 可选。布尔值，指定事件是否 在捕获或冒泡阶段执行。\n   */\n  byAddMultipleListenerForEvent: {\n    enumerable: false,\n    value: function (event, handlerList, useCapture) {\n      handlerList.forEach((handler)=>{\n        this.byAddEventListener(event,handler,useCapture);\n      });\n    }\n  },\n\n\n\n  /**\n   * 兼容方法：移除事件处理器\n   * @param event : string 必须。要移除的事件名称。注意： 不要使用 \"on\" 前缀。例如，使用 \"click\" 来取代 \"onclick\"。\n   * @param handlerList : Array<function>  必需。需要移除的事件处理器数组。\n   * @param useCapture : boolean 可选。布尔值，指定移除事件句柄的阶段。\n   */\n  byRemoveMultipleListenerForEvent: {\n    enumerable: false,\n    value: function (event, handlerList, useCapture) {\n      handlerList.forEach((handler)=>{\n        this.byRemoveEventListener(event,handler,useCapture);\n      });\n    }\n  },\n\n\n\n\n};\n\n\nObject.defineProperties(EventTarget.prototype, propertyDescriptors);\n\n\n","var fdPrototype = FormData.prototype;\n\n\n\n// 在较低版本的浏览器中(比如：IOS10中的Safari)，FormData 类只有一个实例方法 append ，在这种情况下，只能把 set 操作 当作 append 来用\nif (!fdPrototype.set){\n  fdPrototype.set = fdPrototype.append\n}\n","/**\n * isChildNodeOf(node)\n * 判断 当前节点 是否是 其它节点node 的 子节点 或 后代节点\n * @param node : Node    被检测的节点\n * @returns boolean\n */\nNode.prototype.isChildNodeOf = function isChildNodeOf(node) {\n  var parent = this.parentNode;\n  if (parent){\n    if (node.isSameNode(parent)) {\n      return true;\n    }else {\n      return parent.isChildNodeOf(node);\n    }\n  } else {\n    return false;\n  }\n};\n\n\n\n\n\n/**\n * isChildElementOf(element)\n * 判断 当前元素 是否是 其它元素element 的 子元素 或 后代元素\n * @param element : Node    被检测的元素\n * @returns boolean\n */\nNode.prototype.isChildElementOf = function isChildElementOf(element) {\n  var parent = this.parentElement;\n  if (parent){\n    if (element.isSameNode(parent)) {\n      return true;\n    }else {\n      return parent.isChildElementOf(element);\n    }\n  } else {\n    return false;\n  }\n};\n\n\n\n\n//兼容：开始\n\n\n/**\n * contains(otherNode)\n * contains(otherNode) 返回的是一个布尔值，来表示传入的节点是否为该节点的后代节点。\n * @param otherNode : Node      是否是当前节点的后代节点.\n * @returns boolean     如果 otherNode 是 node 的后代节点或是 node 节点本身.则返回true , 否则返回 false.\n */\nif (!Node.prototype.contains) {\n  Node.prototype.contains = function contains(otherNode) {\n    return this.isSameNode(otherNode) || otherNode.isChildNodeOf(this);\n  }\n}\n\n//兼容：结束\n\n","import \"es-expand\"\nimport \"./Storage\"\n","/**\n * 接受一个键名和值作为参数，将会把键名添加到存储中，如果键名已存在，则更新其对应的值。\n *\n * @param keyName : DOMString  要创建或更新的键名\n * @param anyItem : any      要创建或更新的键名对应的值。\n * @param replacer ? : Function | Array<Function>   如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；\n * @param space ? : number | string    指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格\n */\nStorage.prototype.setAnyItem = function (keyName, anyItem, replacer, space) {\n  let jsonStr = JSON.stringify(anyItem, replacer, space);\n  return this.setItem(keyName, jsonStr);\n}\n\n\n/**\n * 接受一个键名（key name）作为参数，并返回对应键名的值 。\n *\n * @param keyName : DOMString    一个包含键名的 DOMString。\n * @param reviver ? : Function    如果是一个函数，则规定了原始值如何被解析改造，在被返回之前。\n * @returns any\n */\nStorage.prototype.getParsedItem = function (keyName, reviver) {\n  let jsonStr = this.getItem(keyName);\n  return JSON.correctParse(jsonStr, reviver);\n}\n","import {parseQueryString,queryStringify} from \"com-tools\"\n\n\n\nlet propertyDescriptors = {\n  /**\n   * searchParams\n   * 注意：\n   * 该属性是计算属性，每一都会返回一个新的 URLSearchParams 实例；所以，若想通过该属性更改url的参数，需要给该属性重新赋值，而不能基于该属性返回的 URLSearchParams 的实例设置；\n   */\n  searchParams: {\n    enumerable: false,\n    get: function () {\n      return new window.URLSearchParams(this.search);\n    },\n\n    set:function (newValue) {\n      this.search = newValue.toString();\n    }\n  },\n\n\n  /**\n   * get:把 URLSearchParams 转换对象形式；\n   * set: newValue : Object | string | URLSearchParams    把当前URL的查询参数重置成  params\n   */\n  params: {\n    enumerable: false,\n    get: function () {\n      return parseQueryString(this.search,function (value) {\n        return JSON.correctParse(value);\n      });\n    },\n\n    set:function (newValue) {\n      this.search = queryStringify(newValue,function (value,key,params) {\n        if (typeof value == \"object\"){\n          value = JSON.stringify(value);\n        }\n        return value;\n      });\n    }\n  },\n};\n\n\nObject.defineProperties(Location.prototype, propertyDescriptors);\n","//URL扩展：开始\nif (!globalThis.URL && globalThis.webkitURL) {\n  globalThis.URL = globalThis.webkitURL;\n}\n\n\nif (globalThis.URL) {\n\n  let propertyDescriptors = {\n\n    /**\n     * get:把 URLSearchParams 转换对象形式；\n     * set: newValue : Object | string | URLSearchParams    把当前URL的查询参数重置成  params\n     */\n    params: {\n      enumerable: false,\n      get: function () {\n        return this.searchParams.toParams();\n      },\n\n      set: function (newValue) {\n        this.searchParams.resetParams(newValue);\n      }\n    },\n  };\n\n\n  Object.defineProperties(globalThis.URL.prototype, propertyDescriptors);\n}\n\n//URL扩展：结束\n\n\n\n\n\n\n\n\n//依赖 URL 和 URLSearchParams 的解析：开始\n\n\n/**\n * 字符串化 url 对象\n * @param urlObj : Object | URL | Location | string | 其它    必选；url 对象\n * @param replace : boolean     可选；默认值：false ;  url参数部分是否需要把旧的给替换掉\n * @returns urlStr  : string   返回url字符串\n *\n *\n *\n * @property urlObj.href  : string    字符串形式的url地址\n * @property urlObj.protocol  : string    包含URL对应协议的一个DOMString，最后有一个\":\"。\n * @property urlObj.host  : string    包含了域名的一个DOMString，可能在该串最后带有一个\":\"并跟上URL的端口号\n * @property urlObj.pathname  : string    包含URL中路径部分的一个DOMString，开头有一个“/\"。\n * @property urlObj.hash  : string    包含块标识符的DOMString，开头有一个“#”。\n * @property urlObj.params  : string | Object    url的参数对象 或者 字符串\n *\n */\nexport function stringifyUrlByURLClass(urlObj, replace){\n\n\n  if (typeof urlObj != \"object\"){\n    return urlObj;\n  }\n\n  let urlType = urlObj.constructor.name;\n\n  switch (urlType){\n    case \"URL\" :\n    case \"Location\" :{\n      return urlObj.href;\n    }\n    default:{\n      var { href, protocol, host, pathname, params, hash} = urlObj;\n    }\n  }\n\n\n\n\n  let urlInst = new globalThis.URL(href);\n\n  if (protocol){\n    urlInst.protocol = protocol ;\n  }\n\n  if (host) {\n    urlInst.host = host;\n  }\n\n  if (pathname) {\n    let pathURLInst = new globalThis.URL(pathname,href);\n    urlInst.pathname = pathURLInst.pathname;\n  }\n\n  if (hash) {\n    urlInst.hash = hash;\n  }\n\n\n\n  if (params){\n    let searchParams = urlInst.searchParams\n\n    let paramsType = typeof params;\n\n    if (typeof params != \"object\") {\n      if (replace) {\n        urlInst.search = params;\n      } else {\n        let oriSearch = urlInst.search;\n        let separ = oriSearch ? \"&\" : \"\";\n        urlInst.search = oriSearch + separ + params;\n      }\n    } else {\n\n      if (replace) {\n        searchParams.resetParams(params);\n      }else {\n        searchParams.setParams(params);\n      }\n\n    }\n\n  }\n\n\n\n\n  return urlInst.href;\n\n}\n\n\n\n\n\n\n\n/**\n * 把 url 解析成普通的对象\n * @param url : string | URL | Location   必选；url 字符串 或者 URL、Location 实例\n * @returns urlObj  : { href, protocol,host, hostname,port,pathname,search, hash,username,password,origin,searchParams,params }   返回 包含URL所有信息的普通对象\n *\n *\n * @property urlObj.params  : Object    url的参数对象\n * 注意： urlObj 的其它属性跟 URL 实例的属性一样；即实现了 URLUtils 中定义的属性\n *\n */\nexport function parseUrlByURLClass(url){\n\n  let urlInst = url;\n  if (typeof url == \"string\"){\n    urlInst = new globalThis.URL(url);\n  }\n\n  var { href, protocol,host, hostname,port,pathname,search, hash,username,password,origin,searchParams } = urlInst;\n\n  let urlObj = { href, protocol,host, hostname,port,pathname,search, hash,username,password,origin,searchParams };\n\n\n  if (!searchParams && search) {\n    searchParams = new globalThis.URLSearchParams(search);\n  }\n\n  if  (searchParams){\n    var params = searchParams.toParams();\n  }\n\n  urlObj.params = params;\n\n  return urlObj;\n}\n\n\n\n\n\n//依赖 URL 和 URLSearchParams 的解析：结束\n\n\n","import {safelyIterate} from \"com-tools\"\n\n\nif (!globalThis.URLSearchParams && globalThis.URL) {\n  var _URLsearchParamsInst_ = (new globalThis.URL(\"gby://guo.bin.yong\")).searchParams;\n  var _URLSearchParamsConstructor_ = _URLsearchParamsInst_ && _URLsearchParamsInst_.constructor;\n  if (typeof _URLSearchParamsConstructor_ == \"function\") {\n    globalThis.URLSearchParams = _URLSearchParamsConstructor_;\n  }\n}\n\n\nif (globalThis.URLSearchParams) {\n\n\n  let propertyDescriptors = {\n\n    /**\n     * toParams()\n     * 把 URLSearchParams 转换对象形式；\n     */\n    toParams: {\n      enumerable: false,\n      value: function () {\n        let params = {};\n\n        this.forEach(function (value, key) {\n          params[key] = value;\n        });\n\n        return params;\n      }\n    },\n\n    /**\n     * clear()\n     * 清除所有的 key\n     */\n    clear: {\n      enumerable: false,\n      value: function () {\n        safelyIterate(this.keys(), (key) => {\n          this.delete(key);\n        });\n      }\n    },\n\n\n    /**\n     * appendParams(params)\n     * 将 params  对象自身 或 查询字符串 的每一个可枚举成员都插入一个新搜索参数。\n     * @param params : Object | string | URLSearchParams  该 对象自身 或 查询字符串 的所有成员都会被插入进来\n     *\n     * 注意：不要质疑下面的 switch 代码的逻辑，这是正确且高效的，这样写也是为了减少代码量\n     */\n    appendParams: {\n      enumerable: false,\n      value: function (params) {\n\n        var paramsSP = params;\n        switch (params.constructor) {\n          case String: {\n            paramsSP = new globalThis.URLSearchParams(params);\n          }\n          case globalThis.URLSearchParams: {\n            paramsSP.forEach((value, key) => {\n              this.append(key, value);\n            });\n            break;\n          }\n\n          default: {\n\n            Object.keys(params).forEach((key) => {\n              this.append(key, params[key]);\n            });\n\n          }\n        }\n\n\n      }\n    },\n\n\n    /**\n     * setParams(params)\n     * URLSearchParams接口的 setParams(params) 方法用于将 params  对象自身 或 查询字符串 的所有可枚举成员 设置成搜索参数的成员。如果设置前已经存在匹配的值，该方法会删除多余的，如果将要设置的值不存在，则创建它\n     * @param params : Object | string | URLSearchParams 该 对象自身 或 查询字符串 的所有成员都会被插入进来\n     *\n     * 注意：不要质疑下面的 switch 代码的逻辑，这是正确且高效的，这样写也是为了减少代码量\n     */\n    setParams: {\n      enumerable: false,\n      value: function (params) {\n\n        var paramsSP = params;\n        switch (params.constructor) {\n          case String: {\n            paramsSP = new globalThis.URLSearchParams(params);\n          }\n          case globalThis.URLSearchParams: {\n            paramsSP.forEach((value, key) => {\n              this.set(key, value);\n            });\n            break;\n          }\n\n          default: {\n\n            Object.keys(params).forEach((key) => {\n              this.set(key, params[key]);\n            });\n\n          }\n        }\n\n\n      }\n    },\n\n\n    /**\n     * resetParams(obj)\n     * 清除之前所有的搜索参数，并将 params  对象自身 或 查询字符串 的每一个可枚举成员都插入一个新搜索参数。\n     * @param params : Object | string | URLSearchParams 该 对象自身 或 查询字符串 的所有成员都会被插入进来\n     */\n    resetParams: {\n      enumerable: false,\n      value: function (params) {\n        this.clear();\n        this.appendParams(params);\n      }\n    },\n\n\n  };\n\n\n  Object.defineProperties(globalThis.URLSearchParams.prototype, propertyDescriptors);\n}\n","import \"es-expand\"\n\n\nimport  \"./Location\"\nexport * from \"./URL\"\nimport  \"./URLSearchParams\"\n\n\n\n\n// Element：开始\n\n\n\n\n\n/**\n * elementIsMatchSelector(element,selector,parentNode)\n * 测试 在 parentNode 和其子元素中匹配的 选择器 selector 的元素是否包含元素 element\n * 或者可以理解为：\n * 测试目标 element 在 parentNode 节点或其子节点中 是否匹配指定的选择器 selector\n * @param element : Element   被测试的元素\n * @param selector : string   css 选择器\n * @param parentNode ? : Element   可选；默认值：document ; 限定匹配的范围;\n * @returns boolean\n */\nexport function elementIsMatchSelector(element,selector,parentNode) {\n  if (!parentNode) {\n    parentNode = document;\n  }\n\n  if (!parentNode.contains(element)){\n     return false;\n  }\n\n  var elemList =  parentNode.querySelectorAll(selector);\n  var elemArray = Array.from(elemList);\n  return elemArray.some(function(qsElem){\n    return element.isSameNode(qsElem);\n  });\n\n}\n\n\n\n\n/**\n * isMatchSelector(selector,parentNode)\n * 测试 在 parentNode 和其子元素中匹配的 选择器 selector 的元素是否包含元素 当前元素\n * 或者可以理解为：\n * 当前元素 在 parentNode 节点或其子节点中 是否匹配指定的选择器 selector\n * @param selector : string   css 选择器\n * @param parentNode ? : Element   可选；默认值：document ; 限定匹配的范围;\n * @returns boolean\n */\nElement.prototype.isMatchSelector = function isMatchSelector(selector,parentNode) {\n  return elementIsMatchSelector(this,selector,parentNode)\n};\n\n\n\n\n\n\n/**\n * elementIsMatchOption(element,option,parentNode)\n * 测试 在 parentNode 和其子元素中匹配的 匹配选项option 的元素是否包含元素 element\n * 或者可以理解为：\n * 测试目标 element 在 parentNode 节点或其子节点中 是否匹配指定的 匹配选项option\n * @param element : Element   被测试的元素\n * @param option : {tag:string, id:string, class:string | Array,  selector:string}   匹配选项；注意：各种选项配置项是且的关系，即：选项对象中设置的所有匹配项都匹配才算通过\n * @param parentNode ? : Element   可选；默认值：document ; 限定匹配的范围;\n * @returns boolean\n *\n *\n * 注意：\n * option的各种配置项是且的关系，即：option中设置的所有配置项都匹配才算通过\n * option 中可配置如下属性：\n * tag ? : string   可选； 元素的标签名字\n * id ? : string  可选； 元素的id\n * class ? : string | Array  可选；元素的class ；如果是 字符串，则会与 元素的 className 进行比较，只有完全相等才算通过；如果是 数组，则元素的类包含数组中指定的所有类，才算通过\n * selector : string    可选；css选择器\n *\n */\nexport function elementIsMatchOption(element,option,parentNode) {\n  if (!parentNode) {\n    parentNode = document;\n  }\n\n  if (typeof option == \"string\"){\n    option = {selector:option};\n  }\n\n  return Object.keys(option).every(function (key) {\n    var value = option[key];\n    var keyMatch = true;\n    switch (key) {\n\n      case \"tag\":{\n        if (value){\n          value = value.toLowerCase();\n        }\n        keyMatch = element.localName == value && element.tagName.toLowerCase() == value;\n        break\n      }\n\n      case \"id\":{\n        keyMatch = element.id == value;\n        break\n      }\n\n      case \"class\":{\n\n        if (Array.isArray(value)) {\n          var classArr = Array.from(element.classList);\n          keyMatch = classArr.isContains(value);\n\n        }else {\n          keyMatch = element.className == value;\n        }\n\n        break\n      }\n\n\n      case \"selector\":{\n        keyMatch = element.isMatchSelector(value,parentNode);\n        break\n      }\n\n    }\n\n\n    return keyMatch;\n  });\n}\n\n\n\n\n\n\n/**\n * isMatchOption(option,parentNode)\n * 测试 在 parentNode 和其子元素中匹配的 匹配选项option 的元素是否包含当前元素\n * 或者可以理解为：\n * 当前元素 在 parentNode 节点或其子节点中 是否匹配指定的 匹配选项option\n * @param option : {tag:string, id:string, class:string | Array,  selector:string}   匹配选项；注意：各种选项配置项是且的关系，即：选项对象中设置的所有匹配项都匹配才算通过\n * @param parentNode ? : Element   可选；默认值：document ; 限定匹配的范围;\n * @returns boolean\n *\n *\n * 注意：\n * option的各种配置项是且的关系，即：option中设置的所有配置项都匹配才算通过\n * option 中可配置如下属性：\n * tag ? : string   可选； 元素的标签名字\n * id ? : string  可选； 元素的id\n * class ? : string | Array  可选；元素的class ；如果是 字符串，则会与 元素的 className 进行比较，只有完全相等才算通过；如果是 数组，则元素的类包含数组中指定的所有类，才算通过\n * selector : string    可选；css选择器\n *\n */\nElement.prototype.isMatchOption =  function isMatchOption(option,parentNode) {\n  return elementIsMatchOption(this,option,parentNode);\n};\n\n\n\n\n\n\n/**\n * elementIsMatchSomeOptions(element,optionArr,parentNode)\n * 在 parentNode 节点或其子节点中，  optionArr 数组中 是否存在 元素 element  匹配的 选项\n * @param element : Element   被测试的元素\n * @param optionArr : Array<Option>   匹配选项数组；只要数组中存在匹配的选项对象，就算通过\n * @param parentNode ? : Element   可选；默认值：document ; 限定匹配的范围;\n * @returns boolean\n *\n *\n * 注意：\n * Option的各种配置项是且的关系，即：Option 中设置的所有配置项都匹配才算通过\n * Option 中可配置如下属性：\n * tag ? : string   可选； 元素的标签名字\n * id ? : string  可选； 元素的id\n * class ? : string | Array  可选；元素的class ；如果是 字符串，则会与 元素的 className 进行比较，只有完全相等才算通过；如果是 数组，则元素的类包含数组中指定的所有类，才算通过\n * selector : string    可选；css选择器\n *\n */\nexport function elementIsMatchSomeOptions(element,optionArr,parentNode) {\n  return optionArr.some(function (option) {\n    return elementIsMatchOption(element,option,parentNode);\n  });\n}\n\n\n\n\n\n\n/**\n * isMatchSomeOptions(optionArr,parentNode)\n * 在 parentNode 节点或其子节点中，  optionArr 数组中 是否存在 元素 element  匹配的 选项\n * @param optionArr : Array<Option>   匹配选项数组；只要数组中存在匹配的选项对象，就算通过\n * @param parentNode ? : Element   可选；默认值：document ; 限定匹配的范围;\n * @returns boolean\n *\n *\n * 注意：\n * Option的各种配置项是且的关系，即：Option 中设置的所有配置项都匹配才算通过\n * Option 中可配置如下属性：\n * tag ? : string   可选； 元素的标签名字\n * id ? : string  可选； 元素的id\n * class ? : string | Array  可选；元素的class ；如果是 字符串，则会与 元素的 className 进行比较，只有完全相等才算通过；如果是 数组，则元素的类包含数组中指定的所有类，才算通过\n * selector : string    可选；css选择器\n *\n */\nElement.prototype.isMatchSomeOptions =  function isMatchSomeOptions(optionArr,parentNode) {\n  return elementIsMatchSomeOptions(this,optionArr,parentNode);\n};\n\n\n\n\n\n// Element：结束\n\n\n\n\n\n\n\n\n// EventTarget：开始\n\n\n\n\n\n\n\n\n\n/**\n * 创建并返回一个指定次数的事件监听器\n * @param handler : (event:Event, ...paramList)=>Void     用户的自定义的事件处理程序；\n * @param times : number    事件的触发次数\n * @param timeout : number    事件的有效时长\n * @param paramList : Array    自定义参数列表，该列表中的所有元素都会作为 handler 的参数跟在 event 事件对象后面；\n * @returns manyTimesEventListener : (event:Event)=>Void     可直接被当作事件处理程序的函数；\n *\n */\nexport function createManyTimesEventListener(handler,times,timeout,paramList) {\n\n  times = times == undefined ? 1 : times ;\n  timeout = timeout == undefined ? 300 : timeout ;\n\n  var eventMap = {};\n\n\n  /**\n   * 被创建的事件监听器\n   * @param event : Event   事件对象\n   */\n  var  manyTimesEventListener = function(event) {\n\n    var eventType = event.type ;\n    var eventList = eventMap[eventType];\n    if (!eventList){\n      eventList = [] ;\n      eventMap[eventType] = eventList ;\n    }\n\n\n\n    //找出事件的 type、target、currentTarget 都相同的事件对象；\n    var sameEvent = eventList.find(function(eventItem, index){\n      return eventItem.target == event.target && eventItem.listenTarget == event.currentTarget ;\n    });\n\n    if (sameEvent) {\n      sameEvent.currentTimes++ ;   //增加点击次数\n    }else {  //事件初次触发\n\n      /**\n       * 把 currentTimes 记录在 sameEvent 中；\n       * 把 currentTarget 保存在 listenTarget 属性中；因为事件响应链结束后，事件对象的 currentTarget 会被释放；\n       * @property currentTimes : number   记录相应事件的触发次数\n       */\n      sameEvent = event ;\n      sameEvent.currentTimes = 1;\n      sameEvent.listenTarget = sameEvent.currentTarget ;\n\n      //设置计时器\n      setTimeout((currentEvent)=> {\n        var currentTimes = currentEvent.currentTimes ;\n        if (currentTimes == times) { //符合次数才执行真正的事件处理函数\n          var handlerParamListh = paramList ? [currentEvent].concat(paramList) : [currentEvent] ;   //不能更改 paramList ，因为下次调用时还会用到\n          handler.apply(this,handlerParamListh);\n        }\n\n        currentEvent.listenTarget = null ;\n        var myEventTypeList = eventMap[currentEvent.type];\n        var currentEventIndex = myEventTypeList.indexOf(currentEvent);\n        myEventTypeList.splice(currentEventIndex,1);\n\n\n      },timeout,sameEvent);\n\n\n      eventList.push(sameEvent);\n    }\n\n\n\n  };\n\n\n  return manyTimesEventListener ;\n\n}\n\n\n// EventTarget：结束\n\n\n\n\n// Input：开始\n\n\n\n\n/**\n * 本方法是用于解决ipnut输入框在触摸屏中不灵敏的问题，该问题的原因有以下两点（其中第一个原因是主要原因）：\n * 1. 触发input元素获取焦点的事件有延迟；\n * 2. input元素的响应范围较小；\n *\n * 解决方案：\n * 当input或其父元素上触发无延迟事件时，用代码让input元素获取焦点；\n * 经过测试，推荐用无延迟的事件有：touchstart、click 等\n *\n *\n * focusInputOnTargetOfEvent(targetTests,eventName,excludeInput)\n * 在 eventName事件触发在符合条件的目标元素上时，将焦点聚焦到该元素的后代元素中的 第一个input元素 或 目标元素本身（当目标元素是input元素时）\n * @param targetTests : Array< targetFun | ElementMatchOption>    目标元素是否符合条件的测试选项列表，只要符合其中任一测试选项，就算通过\n * @param eventName ? : string     可选；默认值：\"click\"； 监听事件的名字\n * @param excludeInput ? :  boolean  可选；默认值：false ; 表示当点击的目标元素是input元素时，不做设置焦点的动作；即 排除目标元素是input的情况\n *\n *\n * targetFun : (targetElement)=>boolean   测试函数\n * elementMatchOption : {tag:string, id:string, class:string | Array,  selector:string}   匹配选项；注意：各种选项配置项是且的关系，即：选项对象中设置的所有匹配项都匹配才算通过\n *\n * elementMatchOption的各种配置项是且的关系，即：option中设置的所有配置项都匹配才算通过\n * option 中可配置如下属性：\n * tag ? : string   可选； 元素的标签名字\n * id ? : string  可选； 元素的id\n * class ? : string | Array  可选；元素的class ；如果是 字符串，则会与 元素的 className 进行比较，只有完全相等才算通过；如果是 数组，则元素的类包含数组中指定的所有类，才算通过\n * selector : string    可选；css选择器\n *\n */\nexport function focusInputOnTargetOfEvent(targetTests,eventName,excludeInput) {\n\n  if (!Array.isArray(targetTests)) {\n    targetTests = [targetTests];\n  }\n\n  if (!eventName){\n    eventName = \"click\"\n  }\n\n  /**\n   * 测试 testArr 中是否有 符合 target 的 test； 即\n   * @param target\n   * @param testArr\n   * @returns boolean\n   */\n  function testTarget(target,testArr) {\n    return testArr.some(function (test) {\n      if (typeof test == \"function\") {\n        return test(target);\n      }else {\n        return target.isMatchOption(test);\n      }\n    });\n  }\n\n\n  document.addEventListener(eventName,function (event) {\n\n    var target = event.target;\n\n    if (testTarget(target,targetTests)) {\n\n\n      if (target.localName == \"input\") {\n\n        if (!excludeInput) {\n          target.focus();\n        }\n\n      }else {\n\n        var inputDom = target.getElementsByTagName(\"input\")[0];\n        if (inputDom) {\n          inputDom.focus();\n        }\n\n      }\n\n\n    }\n\n  });\n\n}\n\n\n\n\n// Input：结束\n\n\n\n\n\n\n\n\n/**\n * 加载脚本文件\n * @param scriptProps : src | ScriptPropObj   脚本元素的 src 属性值，或脚本元素的属性配置对象\n * @return {HTMLScriptElement}\n */\nexport function loadScript(scriptProps) {\n  if (typeof scriptProps != \"object\"){\n    scriptProps = {src:scriptProps};\n  }\n\n  var {src,...otherPross} = scriptProps;\n  var scriptEle = document.createElement(\"script\");\n  Object.assign(scriptEle,otherPross);\n  scriptEle.src = src;\n  document.body.appendChild(scriptEle);\n  return scriptEle;\n}\n\n\n\n\n\n\n/**\n * prohibitWindowHeightChangeWhenInput(cancel)\n * 禁止当弹出键盘时 winodw 窗口改变高度\n * @param cancel ?: boolean    可选；默认值：false；表示是否要 取消 之前禁止\n */\nexport function prohibitWindowHeightChangeWhenInput(cancel) {\n\n  if (cancel){\n\n    var focusinHandler = prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusin_Handler__;\n    if (focusinHandler){\n      document.removeEventListener(\"focusin\",focusinHandler);\n      prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusin_Handler__ = null;\n    }\n\n\n    var focusoutHandler = prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusout_Handler__;\n    if (focusoutHandler){\n      document.removeEventListener(\"focusin\",focusoutHandler);\n      prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusin_Handler__ = null;\n    }\n\n    return;\n  }\n\n  // focusin 事件处理器\n  prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusin_Handler__ = function __prohibitWindowHeightChangeWhenInput_Focusin_Handler__(event) {\n    var htmlDom = document.documentElement;\n    var htmlStyle = htmlDom.style;\n    var bodyDom = document.body;\n    var bodyStyle = bodyDom.style;\n\n    //保存原始样式；\n    prohibitWindowHeightChangeWhenInput.__originalHeightStyle__ = {\n      html:htmlStyle.height,\n      body:bodyStyle.height\n    };\n\n    //设置html和body的高度为窗口变化前的空度\n    var compStyleOfHtml = window.getComputedStyle(htmlDom);\n    htmlStyle.height = compStyleOfHtml.height;\n    var compStyleOfBody = window.getComputedStyle(bodyDom);\n    bodyStyle.height = compStyleOfBody.height;\n  };\n\n  //把事件加到 document 是为加快事件的处理速度\n  //添加 focusin 事件处理器\n  document.addEventListener(\"focusin\",prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusin_Handler__);\n\n\n\n\n\n  // focusout 事件处理器\n  prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusout_Handler__ = function __prohibitWindowHeightChangeWhenInput_Focusout_Handler__(event) {\n    //还原html 和 body 的原始高度\n    var oriHeightStyle = prohibitWindowHeightChangeWhenInput.__originalHeightStyle__ || {html: null,body: null} ;\n\n    document.documentElement.style.height = oriHeightStyle.html;\n    document.body.style.height = oriHeightStyle.body;\n\n    prohibitWindowHeightChangeWhenInput.__originalHeightStyle__ = null;\n  };\n\n  //添加 focusout 事件处理器\n  document.addEventListener(\"focusout\",prohibitWindowHeightChangeWhenInput.__prohibitWindowHeightChangeWhenInput_Focusout_Handler__);\n\n\n}\n"],"sourceRoot":""}